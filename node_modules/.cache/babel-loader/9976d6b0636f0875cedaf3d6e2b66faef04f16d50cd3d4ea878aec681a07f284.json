{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeHmac = void 0;\n/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nconst crypto_js_1 = require(\"./crypto.js\");\nconst index_js_1 = require(\"../utils/index.js\");\nlet locked = false;\nconst _computeHmac = function (algorithm, key, data) {\n  return (0, crypto_js_1.createHmac)(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nfunction computeHmac(algorithm, _key, _data) {\n  const key = (0, index_js_1.getBytes)(_key, \"key\");\n  const data = (0, index_js_1.getBytes)(_data, \"data\");\n  return (0, index_js_1.hexlify)(__computeHmac(algorithm, key, data));\n}\nexports.computeHmac = computeHmac;\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function () {\n  locked = true;\n};\ncomputeHmac.register = function (func) {\n  if (locked) {\n    throw new Error(\"computeHmac is locked\");\n  }\n  __computeHmac = func;\n};\nObject.freeze(computeHmac);","map":{"version":3,"names":["crypto_js_1","require","index_js_1","locked","_computeHmac","algorithm","key","data","createHmac","update","digest","__computeHmac","computeHmac","_key","_data","getBytes","hexlify","exports","_","lock","register","func","Error","Object","freeze"],"sources":["/home/nikola/Desktop/Kriptografija projekat Nikola Ivanovic 637-2019/friendship-dapp/node_modules/ethers/src.ts/crypto/hmac.ts"],"sourcesContent":["/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _computeHmac = function(algorithm: \"sha256\" | \"sha512\", key: Uint8Array, data: Uint8Array): BytesLike {\n    return createHmac(algorithm, key).update(data).digest();\n}\n\nlet __computeHmac = _computeHmac;\n\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm: \"sha256\" | \"sha512\", _key: BytesLike, _data: BytesLike): string {\n    const key = getBytes(_key, \"key\");\n    const data = getBytes(_data, \"data\");\n    return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock =  function() { locked = true; }\ncomputeHmac.register = function(func: (algorithm: \"sha256\" | \"sha512\", key: Uint8Array, data: Uint8Array) => BytesLike) {\n    if (locked) { throw new Error(\"computeHmac is locked\"); }\n    __computeHmac = func;\n}\nObject.freeze(computeHmac);\n"],"mappings":";;;;;;AAAA;;;;;;;;AAQA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAKA,IAAIE,MAAM,GAAG,KAAK;AAElB,MAAMC,YAAY,GAAG,SAAAA,CAASC,SAA8B,EAAEC,GAAe,EAAEC,IAAgB;EAC3F,OAAO,IAAAP,WAAA,CAAAQ,UAAU,EAACH,SAAS,EAAEC,GAAG,CAAC,CAACG,MAAM,CAACF,IAAI,CAAC,CAACG,MAAM,EAAE;AAC3D,CAAC;AAED,IAAIC,aAAa,GAAGP,YAAY;AAEhC;;;;;;;;;;;;;;;;;AAiBA,SAAgBQ,WAAWA,CAACP,SAA8B,EAAEQ,IAAe,EAAEC,KAAgB;EACzF,MAAMR,GAAG,GAAG,IAAAJ,UAAA,CAAAa,QAAQ,EAACF,IAAI,EAAE,KAAK,CAAC;EACjC,MAAMN,IAAI,GAAG,IAAAL,UAAA,CAAAa,QAAQ,EAACD,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,IAAAZ,UAAA,CAAAc,OAAO,EAACL,aAAa,CAACN,SAAS,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC;AACvD;AAJAU,OAAA,CAAAL,WAAA,GAAAA,WAAA;AAKAA,WAAW,CAACM,CAAC,GAAGd,YAAY;AAC5BQ,WAAW,CAACO,IAAI,GAAI;EAAahB,MAAM,GAAG,IAAI;AAAE,CAAC;AACjDS,WAAW,CAACQ,QAAQ,GAAG,UAASC,IAAsF;EAClH,IAAIlB,MAAM,EAAE;IAAE,MAAM,IAAImB,KAAK,CAAC,uBAAuB,CAAC;;EACtDX,aAAa,GAAGU,IAAI;AACxB,CAAC;AACDE,MAAM,CAACC,MAAM,CAACZ,WAAW,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}