{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyMessage = exports.hashMessage = void 0;\nconst index_js_1 = require(\"../crypto/index.js\");\nconst index_js_2 = require(\"../constants/index.js\");\nconst index_js_3 = require(\"../transaction/index.js\");\nconst index_js_4 = require(\"../utils/index.js\");\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */\nfunction hashMessage(message) {\n  if (typeof message === \"string\") {\n    message = (0, index_js_4.toUtf8Bytes)(message);\n  }\n  return (0, index_js_1.keccak256)((0, index_js_4.concat)([(0, index_js_4.toUtf8Bytes)(index_js_2.MessagePrefix), (0, index_js_4.toUtf8Bytes)(String(message.length)), message]));\n}\nexports.hashMessage = hashMessage;\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nfunction verifyMessage(message, sig) {\n  const digest = hashMessage(message);\n  return (0, index_js_3.recoverAddress)(digest, sig);\n}\nexports.verifyMessage = verifyMessage;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","index_js_4","hashMessage","message","toUtf8Bytes","keccak256","concat","MessagePrefix","String","length","exports","verifyMessage","sig","digest","recoverAddress"],"sources":["/home/nikola/Desktop/Kriptografija projekat Nikola Ivanovic 637-2019/friendship-dapp/node_modules/ethers/src.ts/hash/message.ts"],"sourcesContent":["import { keccak256 } from \"../crypto/index.js\";\nimport { MessagePrefix } from \"../constants/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, toUtf8Bytes } from \"../utils/index.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */\nexport function hashMessage(message: Uint8Array | string): string {\n    if (typeof(message) === \"string\") { message = toUtf8Bytes(message); }\n    return keccak256(concat([\n        toUtf8Bytes(MessagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nexport function verifyMessage(message: Uint8Array | string, sig: SignatureLike): string {\n    const digest = hashMessage(message);\n    return recoverAddress(digest, sig);\n}\n"],"mappings":";;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,UAAA,GAAAH,OAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAAgBI,WAAWA,CAACC,OAA4B;EACpD,IAAI,OAAOA,OAAQ,KAAK,QAAQ,EAAE;IAAEA,OAAO,GAAG,IAAAF,UAAA,CAAAG,WAAW,EAACD,OAAO,CAAC;;EAClE,OAAO,IAAAN,UAAA,CAAAQ,SAAS,EAAC,IAAAJ,UAAA,CAAAK,MAAM,EAAC,CACpB,IAAAL,UAAA,CAAAG,WAAW,EAACL,UAAA,CAAAQ,aAAa,CAAC,EAC1B,IAAAN,UAAA,CAAAG,WAAW,EAACI,MAAM,CAACL,OAAO,CAACM,MAAM,CAAC,CAAC,EACnCN,OAAO,CACV,CAAC,CAAC;AACP;AAPAO,OAAA,CAAAR,WAAA,GAAAA,WAAA;AASA;;;;AAIA,SAAgBS,aAAaA,CAACR,OAA4B,EAAES,GAAkB;EAC1E,MAAMC,MAAM,GAAGX,WAAW,CAACC,OAAO,CAAC;EACnC,OAAO,IAAAH,UAAA,CAAAc,cAAc,EAACD,MAAM,EAAED,GAAG,CAAC;AACtC;AAHAF,OAAA,CAAAC,aAAA,GAAAA,aAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}