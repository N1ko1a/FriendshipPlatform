{"ast":null,"code":"\"use strict\";\n\n/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decryptCrowdsaleJson = exports.isCrowdsaleJson = void 0;\nconst aes_js_1 = require(\"aes-js\");\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../crypto/index.js\");\nconst index_js_3 = require(\"../hash/index.js\");\nconst index_js_4 = require(\"../utils/index.js\");\nconst utils_js_1 = require(\"./utils.js\");\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */\nfunction isCrowdsaleJson(json) {\n  try {\n    const data = JSON.parse(json);\n    if (data.encseed) {\n      return true;\n    }\n  } catch (error) {}\n  return false;\n}\nexports.isCrowdsaleJson = isCrowdsaleJson;\n// See: https://github.com/ethereum/pyethsaletool\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */\nfunction decryptCrowdsaleJson(json, _password) {\n  const data = JSON.parse(json);\n  const password = (0, utils_js_1.getPassword)(_password);\n  // Ethereum Address\n  const address = (0, index_js_1.getAddress)((0, utils_js_1.spelunk)(data, \"ethaddr:string!\"));\n  // Encrypted Seed\n  const encseed = (0, utils_js_1.looseArrayify)((0, utils_js_1.spelunk)(data, \"encseed:string!\"));\n  (0, index_js_4.assertArgument)(encseed && encseed.length % 16 === 0, \"invalid encseed\", \"json\", json);\n  const key = (0, index_js_4.getBytes)((0, index_js_2.pbkdf2)(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n  const iv = encseed.slice(0, 16);\n  const encryptedSeed = encseed.slice(16);\n  // Decrypt the seed\n  const aesCbc = new aes_js_1.CBC(key, iv);\n  const seed = (0, aes_js_1.pkcs7Strip)((0, index_js_4.getBytes)(aesCbc.decrypt(encryptedSeed)));\n  // This wallet format is weird... Convert the binary encoded hex to a string.\n  let seedHex = \"\";\n  for (let i = 0; i < seed.length; i++) {\n    seedHex += String.fromCharCode(seed[i]);\n  }\n  return {\n    address,\n    privateKey: (0, index_js_3.id)(seedHex)\n  };\n}\nexports.decryptCrowdsaleJson = decryptCrowdsaleJson;","map":{"version":3,"names":["aes_js_1","require","index_js_1","index_js_2","index_js_3","index_js_4","utils_js_1","isCrowdsaleJson","json","data","JSON","parse","encseed","error","exports","decryptCrowdsaleJson","_password","password","getPassword","address","getAddress","spelunk","looseArrayify","assertArgument","length","key","getBytes","pbkdf2","slice","iv","encryptedSeed","aesCbc","CBC","seed","pkcs7Strip","decrypt","seedHex","i","String","fromCharCode","privateKey","id"],"sources":["/home/nikola/Desktop/Projekat/friendship-dapp/node_modules/ethers/src.ts/wallet/json-crowdsale.ts"],"sourcesContent":["/**\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\n\nimport { CBC, pkcs7Strip } from \"aes-js\";\n\nimport { getAddress } from \"../address/index.js\";\nimport { pbkdf2 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\n\nimport { getPassword, looseArrayify, spelunk } from \"./utils.js\";\n\n\n/**\n *  The data stored within a JSON Crowdsale wallet is fairly\n *  minimal.\n */\nexport type CrowdsaleAccount = {\n    privateKey: string;\n    address: string;\n}\n\n/**\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\n */\nexport function isCrowdsaleJson(json: string): boolean {\n    try {\n        const data = JSON.parse(json);\n        if (data.encseed) { return true; }\n    } catch (error) { }\n    return false;\n}\n\n// See: https://github.com/ethereum/pyethsaletool\n\n/**\n *  Before Ethereum launched, it was necessary to create a wallet\n *  format for backers to use, which would be used to receive ether\n *  as a reward for contributing to the project.\n *\n *  The [[link-crowdsale]] format is now obsolete, but it is still\n *  useful to support and the additional code is fairly trivial as\n *  all the primitives required are used through core portions of\n *  the library.\n */\nexport function decryptCrowdsaleJson(json: string, _password: string | Uint8Array): CrowdsaleAccount {\n    const data = JSON.parse(json);\n    const password = getPassword(_password);\n\n    // Ethereum Address\n    const address = getAddress(spelunk(data, \"ethaddr:string!\"));\n\n    // Encrypted Seed\n    const encseed = looseArrayify(spelunk(data, \"encseed:string!\"));\n    assertArgument(encseed && (encseed.length % 16) === 0, \"invalid encseed\", \"json\", json);\n\n    const key = getBytes(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n\n    // Decrypt the seed\n    const aesCbc = new CBC(key, iv);\n    const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));\n\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n\n    return { address, privateKey: id(seedHex) };\n}\n"],"mappings":";;AAAA;;;;;;;AAIA,MAAAA,QAAA,GAAAC,OAAA;AAEA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,UAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AAEA,MAAAK,UAAA,GAAAL,OAAA;AAYA;;;AAGA,SAAgBM,eAAeA,CAACC,IAAY;EACxC,IAAI;IACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;IAC7B,IAAIC,IAAI,CAACG,OAAO,EAAE;MAAE,OAAO,IAAI;;GAClC,CAAC,OAAOC,KAAK,EAAE;EAChB,OAAO,KAAK;AAChB;AANAC,OAAA,CAAAP,eAAA,GAAAA,eAAA;AAQA;AAEA;;;;;;;;;;AAUA,SAAgBQ,oBAAoBA,CAACP,IAAY,EAAEQ,SAA8B;EAC7E,MAAMP,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;EAC7B,MAAMS,QAAQ,GAAG,IAAAX,UAAA,CAAAY,WAAW,EAACF,SAAS,CAAC;EAEvC;EACA,MAAMG,OAAO,GAAG,IAAAjB,UAAA,CAAAkB,UAAU,EAAC,IAAAd,UAAA,CAAAe,OAAO,EAACZ,IAAI,EAAE,iBAAiB,CAAC,CAAC;EAE5D;EACA,MAAMG,OAAO,GAAG,IAAAN,UAAA,CAAAgB,aAAa,EAAC,IAAAhB,UAAA,CAAAe,OAAO,EAACZ,IAAI,EAAE,iBAAiB,CAAC,CAAC;EAC/D,IAAAJ,UAAA,CAAAkB,cAAc,EAACX,OAAO,IAAKA,OAAO,CAACY,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE,iBAAiB,EAAE,MAAM,EAAEhB,IAAI,CAAC;EAEvF,MAAMiB,GAAG,GAAG,IAAApB,UAAA,CAAAqB,QAAQ,EAAC,IAAAvB,UAAA,CAAAwB,MAAM,EAACV,QAAQ,EAAEA,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,CAACW,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAEjF,MAAMC,EAAE,GAAGjB,OAAO,CAACgB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,MAAME,aAAa,GAAGlB,OAAO,CAACgB,KAAK,CAAC,EAAE,CAAC;EAEvC;EACA,MAAMG,MAAM,GAAG,IAAI/B,QAAA,CAAAgC,GAAG,CAACP,GAAG,EAAEI,EAAE,CAAC;EAC/B,MAAMI,IAAI,GAAG,IAAAjC,QAAA,CAAAkC,UAAU,EAAC,IAAA7B,UAAA,CAAAqB,QAAQ,EAACK,MAAM,CAACI,OAAO,CAACL,aAAa,CAAC,CAAC,CAAC;EAEhE;EACA,IAAIM,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACT,MAAM,EAAEa,CAAC,EAAE,EAAE;IAClCD,OAAO,IAAIE,MAAM,CAACC,YAAY,CAACN,IAAI,CAACI,CAAC,CAAC,CAAC;;EAG3C,OAAO;IAAElB,OAAO;IAAEqB,UAAU,EAAE,IAAApC,UAAA,CAAAqC,EAAE,EAACL,OAAO;EAAC,CAAE;AAC/C;AA3BAtB,OAAA,CAAAC,oBAAA,GAAAA,oBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}