{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;\n/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst provider_websocket_js_1 = require(\"./provider-websocket.js\");\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"mainnet.infura.io\";\n    case \"goerli\":\n      return \"goerli.infura.io\";\n    case \"sepolia\":\n      return \"sepolia.infura.io\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.infura.io\";\n    case \"arbitrum-goerli\":\n      return \"arbitrum-goerli.infura.io\";\n    case \"linea\":\n      return \"linea-mainnet.infura.io\";\n    case \"linea-goerli\":\n      return \"linea-goerli.infura.io\";\n    case \"matic\":\n      return \"polygon-mainnet.infura.io\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.infura.io\";\n    case \"optimism\":\n      return \"optimism-mainnet.infura.io\";\n    case \"optimism-goerli\":\n      return \"optimism-goerli.infura.io\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nclass InfuraWebSocketProvider extends provider_websocket_js_1.WebSocketProvider {\n  /**\n   *  The Project ID for the INFURA connection.\n   */\n  projectId;\n  /**\n   *  The Project Secret.\n   *\n   *  If null, no authenticated requests are made. This should not\n   *  be used outside of private contexts.\n   */\n  projectSecret;\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n  constructor(network, projectId) {\n    const provider = new InfuraProvider(network, projectId);\n    const req = provider._getConnection();\n    (0, index_js_1.assert)(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"InfuraProvider.getWebSocketProvider()\"\n    });\n    const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, network);\n    (0, index_js_1.defineProperties)(this, {\n      projectId: provider.projectId,\n      projectSecret: provider.projectSecret\n    });\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n}\nexports.InfuraWebSocketProvider = InfuraWebSocketProvider;\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nclass InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  /**\n   *  The Project ID for the INFURA connection.\n   */\n  projectId;\n  /**\n   *  The Project Secret.\n   *\n   *  If null, no authenticated requests are made. This should not\n   *  be used outside of private contexts.\n   */\n  projectSecret;\n  /**\n   *  Creates a new **InfuraProvider**.\n   */\n  constructor(_network, projectId, projectSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n    super(request, network, {\n      staticNetwork: network\n    });\n    (0, index_js_1.defineProperties)(this, {\n      projectId,\n      projectSecret\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n  static getWebSocketProvider(network, projectId) {\n    return new InfuraWebSocketProvider(network, projectId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%projectId%% and %%projectSecret%%.\n   */\n  static getRequest(network, projectId, projectSecret) {\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v3/${projectId}`);\n    request.allowGzip = true;\n    if (projectSecret) {\n      request.setCredentials(\"\", projectSecret);\n    }\n    if (projectId === defaultProjectId) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"InfuraProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\nexports.InfuraProvider = InfuraProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","provider_websocket_js_1","defaultProjectId","getHost","name","assertArgument","InfuraWebSocketProvider","WebSocketProvider","projectId","projectSecret","constructor","network","provider","InfuraProvider","req","_getConnection","assert","credentials","operation","url","replace","defineProperties","isCommunityResource","exports","JsonRpcProvider","_network","Network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","getWebSocketProvider","FetchRequest","allowGzip","setCredentials","retryFunc","response","attempt","showThrottleMessage"],"sources":["/home/nikola/Desktop/Projekat/friendship-dapp/node_modules/ethers/src.ts/providers/provider-infura.ts"],"sourcesContent":["/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nimport {\n    defineProperties, FetchRequest, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"mainnet.infura.io\";\n        case \"goerli\":\n            return \"goerli.infura.io\";\n        case \"sepolia\":\n            return \"sepolia.infura.io\";\n\n        case \"arbitrum\":\n            return \"arbitrum-mainnet.infura.io\";\n        case \"arbitrum-goerli\":\n            return \"arbitrum-goerli.infura.io\";\n        case \"linea\":\n            return \"linea-mainnet.infura.io\";\n        case \"linea-goerli\":\n            return \"linea-goerli.infura.io\";\n        case \"matic\":\n            return \"polygon-mainnet.infura.io\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.infura.io\";\n        case \"optimism\":\n            return \"optimism-mainnet.infura.io\";\n        case \"optimism-goerli\":\n            return \"optimism-goerli.infura.io\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    readonly projectId!: string;\n\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    readonly projectSecret!: null | string;\n\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    constructor(network?: Networkish, projectId?: string) {\n        const provider = new InfuraProvider(network, projectId);\n\n        const req = provider._getConnection();\n        assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"InfuraProvider.getWebSocketProvider()\" });\n\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineProperties<InfuraWebSocketProvider>(this, {\n            projectId: provider.projectId,\n            projectSecret: provider.projectSecret\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nexport class InfuraProvider extends JsonRpcProvider implements CommunityResourcable {\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    readonly projectId!: string;\n\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    readonly projectSecret!: null | string;\n\n    /**\n     *  Creates a new **InfuraProvider**.\n     */\n    constructor(_network?: Networkish, projectId?: null | string, projectSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (projectId == null) { projectId = defaultProjectId; }\n        if (projectSecret == null) { projectSecret = null; }\n\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<InfuraProvider>(this, { projectId, projectSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n\n    /**\n     *  Creates a new **InfuraWebSocketProvider**.\n     */\n    static getWebSocketProvider(network?: Networkish, projectId?: string): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, projectId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%%\n     *  with %%projectId%% and %%projectSecret%%.\n     */\n    static getRequest(network: Network, projectId?: null | string, projectSecret?: null | string): FetchRequest {\n        if (projectId == null) { projectId = defaultProjectId; }\n        if (projectSecret == null) { projectSecret = null; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v3/${ projectId }`);\n        request.allowGzip = true;\n        if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n\n        if (projectId === defaultProjectId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"InfuraProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}