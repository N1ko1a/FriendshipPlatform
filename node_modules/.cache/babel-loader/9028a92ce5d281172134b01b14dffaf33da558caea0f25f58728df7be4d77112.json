{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FixedNumber = void 0;\n/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */\nconst data_js_1 = require(\"./data.js\");\nconst errors_js_1 = require(\"./errors.js\");\nconst maths_js_1 = require(\"./maths.js\");\nconst properties_js_1 = require(\"./properties.js\");\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {};\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile (Zeros.length < 80) {\n  Zeros += Zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals) {\n  let result = Zeros;\n  while (result.length < decimals) {\n    result += result;\n  }\n  return BigInt(\"1\" + result.substring(0, decimals));\n}\nfunction checkValue(val, format, safeOp) {\n  const width = BigInt(format.width);\n  if (format.signed) {\n    const limit = BN_1 << width - BN_1;\n    (0, errors_js_1.assert)(safeOp == null || val >= -limit && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: safeOp,\n      fault: \"overflow\",\n      value: val\n    });\n    if (val > BN_0) {\n      val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);\n    } else {\n      val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);\n    }\n  } else {\n    const limit = BN_1 << width;\n    (0, errors_js_1.assert)(safeOp == null || val >= 0 && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: safeOp,\n      fault: \"overflow\",\n      value: val\n    });\n    val = (val % limit + limit) % limit & limit - BN_1;\n  }\n  return val;\n}\nfunction getFormat(value) {\n  if (typeof value === \"number\") {\n    value = `fixed128x${value}`;\n  }\n  let signed = true;\n  let width = 128;\n  let decimals = 18;\n  if (typeof value === \"string\") {\n    // Parse the format string\n    if (value === \"fixed\") {\n      // defaults...\n    } else if (value === \"ufixed\") {\n      signed = false;\n    } else {\n      const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n      (0, errors_js_1.assertArgument)(match, \"invalid fixed format\", \"format\", value);\n      signed = match[1] !== \"u\";\n      width = parseInt(match[2]);\n      decimals = parseInt(match[3]);\n    }\n  } else if (value) {\n    // Extract the values from the object\n    const v = value;\n    const check = (key, type, defaultValue) => {\n      if (v[key] == null) {\n        return defaultValue;\n      }\n      (0, errors_js_1.assertArgument)(typeof v[key] === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n      return v[key];\n    };\n    signed = check(\"signed\", \"boolean\", signed);\n    width = check(\"width\", \"number\", width);\n    decimals = check(\"decimals\", \"number\", decimals);\n  }\n  (0, errors_js_1.assertArgument)(width % 8 === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n  (0, errors_js_1.assertArgument)(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n  const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n  return {\n    signed,\n    width,\n    decimals,\n    name\n  };\n}\nfunction toString(val, decimals) {\n  let negative = \"\";\n  if (val < BN_0) {\n    negative = \"-\";\n    val *= BN_N1;\n  }\n  let str = val.toString();\n  // No decimal point for whole values\n  if (decimals === 0) {\n    return negative + str;\n  }\n  // Pad out to the whole component (including a whole digit)\n  while (str.length <= decimals) {\n    str = Zeros + str;\n  }\n  // Insert the decimal point\n  const index = str.length - decimals;\n  str = str.substring(0, index) + \".\" + str.substring(index);\n  // Trim the whole component (leaving at least one 0)\n  while (str[0] === \"0\" && str[1] !== \".\") {\n    str = str.substring(1);\n  }\n  // Trim the decimal component (leaving at least one 0)\n  while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\n    str = str.substring(0, str.length - 1);\n  }\n  return negative + str;\n}\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, an value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */\nclass FixedNumber {\n  /**\n   *  The specific fixed-point arithmetic field for this value.\n   */\n  format;\n  #format;\n  // The actual value (accounting for decimals)\n  #val;\n  // A base-10 value to multiple values by to maintain the magnitude\n  #tens;\n  /**\n   *  This is a property so console.log shows a human-meaningful value.\n   *\n   *  @private\n   */\n  _value;\n  // Use this when changing this file to get some typing info,\n  // but then switch to any to mask the internal type\n  //constructor(guard: any, value: bigint, format: _FixedFormat) {\n  /**\n   *  @private\n   */\n  constructor(guard, value, format) {\n    (0, errors_js_1.assertPrivate)(guard, _guard, \"FixedNumber\");\n    this.#val = value;\n    this.#format = format;\n    const _value = toString(value, format.decimals);\n    (0, properties_js_1.defineProperties)(this, {\n      format: format.name,\n      _value\n    });\n    this.#tens = getTens(format.decimals);\n  }\n  /**\n   *  If true, negative values are permitted, otherwise only\n   *  positive values and zero are allowed.\n   */\n  get signed() {\n    return this.#format.signed;\n  }\n  /**\n   *  The number of bits available to store the value.\n   */\n  get width() {\n    return this.#format.width;\n  }\n  /**\n   *  The number of decimal places in the fixed-point arithment field.\n   */\n  get decimals() {\n    return this.#format.decimals;\n  }\n  /**\n   *  The value as an integer, based on the smallest unit the\n   *  [[decimals]] allow.\n   */\n  get value() {\n    return this.#val;\n  }\n  #checkFormat(other) {\n    (0, errors_js_1.assertArgument)(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n  }\n  #checkValue(val, safeOp) {\n    /*\n            const width = BigInt(this.width);\n            if (this.signed) {\n                const limit = (BN_1 << (width - BN_1));\n                assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                    operation: <string>safeOp, fault: \"overflow\", value: val\n                });\n    \n                if (val > BN_0) {\n                    val = fromTwos(mask(val, width), width);\n                } else {\n                    val = -fromTwos(mask(-val, width), width);\n                }\n    \n            } else {\n                const masked = mask(val, width);\n                assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                    operation: <string>safeOp, fault: \"overflow\", value: val\n                });\n                val = masked;\n            }\n    */\n    val = checkValue(val, this.#format, safeOp);\n    return new FixedNumber(_guard, val, this.#format);\n  }\n  #add(o, safeOp) {\n    this.#checkFormat(o);\n    return this.#checkValue(this.#val + o.#val, safeOp);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% added\n   *  to %%other%%, ignoring overflow.\n   */\n  addUnsafe(other) {\n    return this.#add(other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% added\n   *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  add(other) {\n    return this.#add(other, \"add\");\n  }\n  #sub(o, safeOp) {\n    this.#checkFormat(o);\n    return this.#checkValue(this.#val - o.#val, safeOp);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n   *  from %%this%%, ignoring overflow.\n   */\n  subUnsafe(other) {\n    return this.#sub(other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n   *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  sub(other) {\n    return this.#sub(other, \"sub\");\n  }\n  #mul(o, safeOp) {\n    this.#checkFormat(o);\n    return this.#checkValue(this.#val * o.#val / this.#tens, safeOp);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%, ignoring overflow and underflow (precision loss).\n   */\n  mulUnsafe(other) {\n    return this.#mul(other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  mul(other) {\n    return this.#mul(other, \"mul\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs or if underflow (precision loss) occurs.\n   */\n  mulSignal(other) {\n    this.#checkFormat(other);\n    const value = this.#val * other.#val;\n    (0, errors_js_1.assert)(value % this.#tens === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n      operation: \"mulSignal\",\n      fault: \"underflow\",\n      value: this\n    });\n    return this.#checkValue(value / this.#tens, \"mulSignal\");\n  }\n  #div(o, safeOp) {\n    (0, errors_js_1.assert)(o.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n      operation: \"div\",\n      fault: \"divide-by-zero\",\n      value: this\n    });\n    this.#checkFormat(o);\n    return this.#checkValue(this.#val * this.#tens / o.#val, safeOp);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%, ignoring underflow (precision loss). A\n   *  [[NumericFaultError]] is thrown if overflow occurs.\n   */\n  divUnsafe(other) {\n    return this.#div(other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%, ignoring underflow (precision loss). A\n   *  [[NumericFaultError]] is thrown if overflow occurs.\n   */\n  div(other) {\n    return this.#div(other, \"div\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n   *  (precision loss) occurs.\n   */\n  divSignal(other) {\n    (0, errors_js_1.assert)(other.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n      operation: \"div\",\n      fault: \"divide-by-zero\",\n      value: this\n    });\n    this.#checkFormat(other);\n    const value = this.#val * this.#tens;\n    (0, errors_js_1.assert)(value % other.#val === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n      operation: \"divSignal\",\n      fault: \"underflow\",\n      value: this\n    });\n    return this.#checkValue(value / other.#val, \"divSignal\");\n  }\n  /**\n   *  Returns a comparison result between %%this%% and %%other%%.\n   *\n   *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n   *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n   *  both are equal.\n   */\n  cmp(other) {\n    let a = this.value,\n      b = other.value;\n    // Coerce a and b to the same magnitude\n    const delta = this.decimals - other.decimals;\n    if (delta > 0) {\n      b *= getTens(delta);\n    } else if (delta < 0) {\n      a *= getTens(-delta);\n    }\n    // Comnpare\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  }\n  /**\n   *  Returns true if %%other%% is equal to %%this%%.\n   */\n  eq(other) {\n    return this.cmp(other) === 0;\n  }\n  /**\n   *  Returns true if %%other%% is less than to %%this%%.\n   */\n  lt(other) {\n    return this.cmp(other) < 0;\n  }\n  /**\n   *  Returns true if %%other%% is less than or equal to %%this%%.\n   */\n  lte(other) {\n    return this.cmp(other) <= 0;\n  }\n  /**\n   *  Returns true if %%other%% is greater than to %%this%%.\n   */\n  gt(other) {\n    return this.cmp(other) > 0;\n  }\n  /**\n   *  Returns true if %%other%% is greater than or equal to %%this%%.\n   */\n  gte(other) {\n    return this.cmp(other) >= 0;\n  }\n  /**\n   *  Returns a new [[FixedNumber]] which is the largest **integer**\n   *  that is less than or equal to %%this%%.\n   *\n   *  The decimal component of the result will always be ``0``.\n   */\n  floor() {\n    let val = this.#val;\n    if (this.#val < BN_0) {\n      val -= this.#tens - BN_1;\n    }\n    val = this.#val / this.#tens * this.#tens;\n    return this.#checkValue(val, \"floor\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] which is the smallest **integer**\n   *  that is greater than or equal to %%this%%.\n   *\n   *  The decimal component of the result will always be ``0``.\n   */\n  ceiling() {\n    let val = this.#val;\n    if (this.#val > BN_0) {\n      val += this.#tens - BN_1;\n    }\n    val = this.#val / this.#tens * this.#tens;\n    return this.#checkValue(val, \"ceiling\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the decimal component\n   *  rounded up on ties at %%decimals%% places.\n   */\n  round(decimals) {\n    if (decimals == null) {\n      decimals = 0;\n    }\n    // Not enough precision to not already be rounded\n    if (decimals >= this.decimals) {\n      return this;\n    }\n    const delta = this.decimals - decimals;\n    const bump = BN_5 * getTens(delta - 1);\n    let value = this.value + bump;\n    const tens = getTens(delta);\n    value = value / tens * tens;\n    checkValue(value, this.#format, \"round\");\n    return new FixedNumber(_guard, value, this.#format);\n  }\n  /**\n   *  Returns true if %%this%% is equal to ``0``.\n   */\n  isZero() {\n    return this.#val === BN_0;\n  }\n  /**\n   *  Returns true if %%this%% is less than ``0``.\n   */\n  isNegative() {\n    return this.#val < BN_0;\n  }\n  /**\n   *  Returns the string representation of %%this%%.\n   */\n  toString() {\n    return this._value;\n  }\n  /**\n   *  Returns a float approximation.\n   *\n   *  Due to IEEE 754 precission (or lack thereof), this function\n   *  can only return an approximation and most values will contain\n   *  rounding errors.\n   */\n  toUnsafeFloat() {\n    return parseFloat(this.toString());\n  }\n  /**\n   *  Return a new [[FixedNumber]] with the same value but has had\n   *  its field set to %%format%%.\n   *\n   *  This will throw if the value cannot fit into %%format%%.\n   */\n  toFormat(format) {\n    return FixedNumber.fromString(this.toString(), format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] for %%value%% divided by\n   *  %%decimal%% places with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n   *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n   *  or underflow (precision loss).\n   */\n  static fromValue(_value, _decimals, _format) {\n    const decimals = _decimals == null ? 0 : (0, maths_js_1.getNumber)(_decimals);\n    const format = getFormat(_format);\n    let value = (0, maths_js_1.getBigInt)(_value, \"value\");\n    const delta = decimals - format.decimals;\n    if (delta > 0) {\n      const tens = getTens(delta);\n      (0, errors_js_1.assert)(value % tens === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n        operation: \"fromValue\",\n        fault: \"underflow\",\n        value: _value\n      });\n      value /= tens;\n    } else if (delta < 0) {\n      value *= getTens(-delta);\n    }\n    checkValue(value, format, \"fromValue\");\n    return new FixedNumber(_guard, value, format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n   *  in %%format%%, either due to overflow or underflow (precision loss).\n   */\n  static fromString(_value, _format) {\n    const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n    (0, errors_js_1.assertArgument)(match && match[2].length + match[3].length > 0, \"invalid FixedNumber string value\", \"value\", _value);\n    const format = getFormat(_format);\n    let whole = match[2] || \"0\",\n      decimal = match[3] || \"\";\n    // Pad out the decimals\n    while (decimal.length < format.decimals) {\n      decimal += Zeros;\n    }\n    // Check precision is safe\n    (0, errors_js_1.assert)(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n      operation: \"fromString\",\n      fault: \"underflow\",\n      value: _value\n    });\n    // Remove extra padding\n    decimal = decimal.substring(0, format.decimals);\n    const value = BigInt(match[1] + whole + decimal);\n    checkValue(value, format, \"fromString\");\n    return new FixedNumber(_guard, value, format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] with the big-endian representation\n   *  %%value%% with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n   *  in %%format%% due to overflow.\n   */\n  static fromBytes(_value, _format) {\n    let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, \"value\"));\n    const format = getFormat(_format);\n    if (format.signed) {\n      value = (0, maths_js_1.fromTwos)(value, format.width);\n    }\n    checkValue(value, format, \"fromBytes\");\n    return new FixedNumber(_guard, value, format);\n  }\n}\nexports.FixedNumber = FixedNumber;\n//const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n//console.log(f1.divSignal(f2));\n//const BUMP = FixedNumber.from(\"0.5\");","map":{"version":3,"names":["data_js_1","require","errors_js_1","maths_js_1","properties_js_1","BN_N1","BigInt","BN_0","BN_1","BN_5","_guard","Zeros","length","getTens","decimals","result","substring","checkValue","val","format","safeOp","width","signed","limit","assert","operation","fault","value","fromTwos","mask","getFormat","match","assertArgument","parseInt","v","check","key","type","defaultValue","name","String","toString","negative","str","index","FixedNumber","tens","_value","constructor","guard","assertPrivate","defineProperties","checkFormat","#checkFormat","other","#checkValue","add","#add","o","addUnsafe","sub","#sub","subUnsafe","mul","#mul","mulUnsafe","mulSignal","div","#div","divUnsafe","divSignal","cmp","a","b","delta","eq","lt","lte","gt","gte","floor","ceiling","round","bump","isZero","isNegative","toUnsafeFloat","parseFloat","toFormat","fromString","fromValue","_decimals","_format","getNumber","getBigInt","whole","decimal","fromBytes","toBigInt","getBytes","exports"],"sources":["/home/nikola/Desktop/Projekat/friendship-dapp/node_modules/ethers/src.ts/utils/fixednumber.ts"],"sourcesContent":["/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */\nimport { getBytes } from \"./data.js\";\nimport { assert, assertArgument, assertPrivate } from \"./errors.js\";\nimport {\n    getBigInt, getNumber, fromTwos, mask, toBigInt\n} from \"./maths.js\";\nimport { defineProperties } from \"./properties.js\";\n\nimport type { BigNumberish, BytesLike, Numeric } from \"./index.js\";\n\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\n\nconst _guard = { };\n\n\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile (Zeros.length < 80) { Zeros += Zeros; }\n\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals: number): bigint {\n    let result = Zeros;\n    while (result.length < decimals) { result += result; }\n    return BigInt(\"1\" + result.substring(0, decimals));\n}\n\n\n\n    /*\n     *  Returns a new FixedFormat for %%value%%.\n     *\n     *  If %%value%% is specified as a ``number``, the bit-width is\n     *  128 bits and %%value%% is used for the ``decimals``.\n     *\n     *  A string %%value%% may begin with ``fixed`` or ``ufixed``\n     *  for signed and unsigned respectfully. If no other properties\n     *  are specified, the bit-width is 128-bits with 18 decimals.\n     *\n     *  To specify the bit-width and demicals, append them separated\n     *  by an ``\"x\"`` to the %%value%%.\n     *\n     *  For example, ``ufixed128x18`` describes an unsigned, 128-bit\n     *  wide format with 18 decimals.\n     *\n     *  If %%value%% is an other object, its properties for ``signed``,\n     *  ``width`` and ``decimals`` are checked.\n     */\n\n/**\n *  A description of a fixed-point arithmetic field.\n *\n *  When specifying the fixed format, the values override the default of\n *  a ``fixed128x18``, which implies a signed 128-bit value with 18\n *  decimals of precision.\n *\n *  The alias ``fixed`` and ``ufixed`` can be used for ``fixed128x18`` and\n *  ``ufixed128x18`` respectively.\n *\n *  When a fixed format string begins with a ``u``, it indicates the field\n *  is unsigned, so any negative values will overflow. The first number\n *  indicates the bit-width and the second number indicates the decimal\n *  precision.\n *\n *  When a ``number`` is used for a fixed format, it indicates the number\n *  of decimal places, and the default width and signed-ness will be used.\n *\n *  The bit-width must be byte aligned and the decimals can be at most 80.\n */\nexport type FixedFormat = number | string | {\n    signed?: boolean,\n    width?: number,\n    decimals?: number\n};\n\nfunction checkValue(val: bigint, format: _FixedFormat, safeOp?: string): bigint {\n    const width = BigInt(format.width);\n    if (format.signed) {\n        const limit = (BN_1 << (width - BN_1));\n        assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n            operation: <string>safeOp, fault: \"overflow\", value: val\n        });\n\n        if (val > BN_0) {\n            val = fromTwos(mask(val, width), width);\n        } else {\n            val = -fromTwos(mask(-val, width), width);\n        }\n\n    } else {\n        const limit = (BN_1 << width);\n        assert(safeOp == null || (val >= 0 && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n            operation: <string>safeOp, fault: \"overflow\", value: val\n        });\n        val = (((val % limit) + limit) % limit) & (limit - BN_1);\n    }\n\n    return val;\n}\n\ntype _FixedFormat = { signed: boolean, width: number, decimals: number, name: string }\n\nfunction getFormat(value?: FixedFormat): _FixedFormat {\n    if (typeof(value) === \"number\") { value = `fixed128x${value}` }\n\n    let signed = true;\n    let width = 128;\n    let decimals = 18;\n\n    if (typeof(value) === \"string\") {\n        // Parse the format string\n        if (value === \"fixed\") {\n            // defaults...\n        } else if (value === \"ufixed\") {\n            signed = false;\n        } else {\n            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n            assertArgument(match, \"invalid fixed format\", \"format\", value);\n            signed = (match[1] !== \"u\");\n            width = parseInt(match[2]);\n            decimals = parseInt(match[3]);\n        }\n    } else if (value) {\n        // Extract the values from the object\n        const v: any = value;\n        const check = (key: string, type: string, defaultValue: any): any => {\n            if (v[key] == null) { return defaultValue; }\n            assertArgument(typeof(v[key]) === type,\n                \"invalid fixed format (\" + key + \" not \" + type +\")\", \"format.\" + key, v[key]);\n            return v[key];\n        }\n        signed = check(\"signed\", \"boolean\", signed);\n        width = check(\"width\", \"number\", width);\n        decimals = check(\"decimals\", \"number\", decimals);\n    }\n\n    assertArgument((width % 8) === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n    assertArgument(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n\n    const name = (signed ? \"\": \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n\n    return { signed, width, decimals, name };\n}\n\nfunction toString(val: bigint, decimals: number) {\n    let negative = \"\";\n    if (val < BN_0) {\n        negative = \"-\";\n        val *= BN_N1;\n    }\n\n    let str = val.toString();\n\n    // No decimal point for whole values\n    if (decimals === 0) { return (negative + str); }\n\n    // Pad out to the whole component (including a whole digit)\n    while (str.length <= decimals) { str = Zeros + str; }\n\n    // Insert the decimal point\n    const index = str.length - decimals;\n    str = str.substring(0, index) + \".\" + str.substring(index);\n\n    // Trim the whole component (leaving at least one 0)\n    while (str[0] === \"0\" && str[1] !== \".\") {\n        str = str.substring(1);\n    }\n\n    // Trim the decimal component (leaving at least one 0)\n    while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\n        str = str.substring(0, str.length - 1);\n    }\n\n    return (negative + str);\n}\n\n\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, an value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */\nexport class FixedNumber {\n\n    /**\n     *  The specific fixed-point arithmetic field for this value.\n     */\n    readonly format!: string;\n\n    readonly #format: _FixedFormat;\n\n    // The actual value (accounting for decimals)\n    #val: bigint;\n\n    // A base-10 value to multiple values by to maintain the magnitude\n    readonly #tens: bigint;\n\n    /**\n     *  This is a property so console.log shows a human-meaningful value.\n     *\n     *  @private\n     */\n    readonly _value!: string;\n\n    // Use this when changing this file to get some typing info,\n    // but then switch to any to mask the internal type\n    //constructor(guard: any, value: bigint, format: _FixedFormat) {\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, value: bigint, format: any) {\n        assertPrivate(guard, _guard, \"FixedNumber\");\n\n        this.#val = value;\n\n        this.#format = format;\n\n        const _value = toString(value, format.decimals);\n\n        defineProperties<FixedNumber>(this, { format: format.name, _value });\n\n        this.#tens = getTens(format.decimals);\n    }\n\n    /**\n     *  If true, negative values are permitted, otherwise only\n     *  positive values and zero are allowed.\n     */\n    get signed(): boolean { return this.#format.signed; }\n\n    /**\n     *  The number of bits available to store the value.\n     */\n    get width(): number { return this.#format.width; }\n\n    /**\n     *  The number of decimal places in the fixed-point arithment field.\n     */\n    get decimals(): number { return this.#format.decimals; }\n\n    /**\n     *  The value as an integer, based on the smallest unit the\n     *  [[decimals]] allow.\n     */\n    get value(): bigint { return this.#val; }\n\n    #checkFormat(other: FixedNumber): void {\n        assertArgument(this.format === other.format,\n            \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n    }\n\n    #checkValue(val: bigint, safeOp?: string): FixedNumber {\n/*\n        const width = BigInt(this.width);\n        if (this.signed) {\n            const limit = (BN_1 << (width - BN_1));\n            assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                operation: <string>safeOp, fault: \"overflow\", value: val\n            });\n\n            if (val > BN_0) {\n                val = fromTwos(mask(val, width), width);\n            } else {\n                val = -fromTwos(mask(-val, width), width);\n            }\n\n        } else {\n            const masked = mask(val, width);\n            assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                operation: <string>safeOp, fault: \"overflow\", value: val\n            });\n            val = masked;\n        }\n*/\n        val = checkValue(val, this.#format, safeOp);\n        return new FixedNumber(_guard, val, this.#format);\n    }\n\n    #add(o: FixedNumber, safeOp?: string): FixedNumber {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val + o.#val, safeOp);\n    }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%, ignoring overflow.\n     */\n    addUnsafe(other: FixedNumber): FixedNumber { return this.#add(other); }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% added\n     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    add(other: FixedNumber): FixedNumber { return this.#add(other, \"add\"); }\n\n    #sub(o: FixedNumber, safeOp?: string): FixedNumber {\n        this.#checkFormat(o);\n        return this.#checkValue(this.#val - o.#val, safeOp);\n    }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%, ignoring overflow.\n     */\n    subUnsafe(other: FixedNumber): FixedNumber { return this.#sub(other); }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    sub(other: FixedNumber): FixedNumber { return this.#sub(other, \"sub\"); }\n\n    #mul(o: FixedNumber, safeOp?: string): FixedNumber {\n        this.#checkFormat(o);\n        return this.#checkValue((this.#val * o.#val) / this.#tens, safeOp);\n    }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%, ignoring overflow and underflow (precision loss).\n     */\n    mulUnsafe(other: FixedNumber): FixedNumber { return this.#mul(other); }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs.\n     */\n    mul(other: FixedNumber): FixedNumber { return this.#mul(other, \"mul\"); }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n     *  occurs or if underflow (precision loss) occurs.\n     */\n    mulSignal(other: FixedNumber): FixedNumber {\n        this.#checkFormat(other);\n        const value = this.#val * other.#val;\n        assert((value % this.#tens) === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n            operation: \"mulSignal\", fault: \"underflow\", value: this\n        });\n        return this.#checkValue(value / this.#tens, \"mulSignal\");\n    }\n\n    #div(o: FixedNumber, safeOp?: string): FixedNumber {\n        assert(o.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\", fault: \"divide-by-zero\", value: this\n        });\n        this.#checkFormat(o);\n        return this.#checkValue((this.#val * this.#tens) / o.#val, safeOp);\n    }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */\n    divUnsafe(other: FixedNumber): FixedNumber { return this.#div(other); }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%, ignoring underflow (precision loss). A\n     *  [[NumericFaultError]] is thrown if overflow occurs.\n     */\n    div(other: FixedNumber): FixedNumber { return this.#div(other, \"div\"); }\n\n\n    /**\n     *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n     *  (precision loss) occurs.\n     */\n    divSignal(other: FixedNumber): FixedNumber {\n        assert(other.#val !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n            operation: \"div\", fault: \"divide-by-zero\", value: this\n        });\n        this.#checkFormat(other);\n        const value = (this.#val * this.#tens);\n        assert((value % other.#val) === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n            operation: \"divSignal\", fault: \"underflow\", value: this\n        });\n        return this.#checkValue(value / other.#val, \"divSignal\");\n    }\n\n    /**\n     *  Returns a comparison result between %%this%% and %%other%%.\n     *\n     *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n     *  both are equal.\n     */\n     cmp(other: FixedNumber): number {\n         let a = this.value, b = other.value;\n\n         // Coerce a and b to the same magnitude\n         const delta = this.decimals - other.decimals;\n         if (delta > 0) {\n             b *= getTens(delta);\n         } else if (delta < 0) {\n             a *= getTens(-delta);\n         }\n\n         // Comnpare\n         if (a < b) { return -1; }\n         if (a > b) { return 1; }\n         return 0;\n     }\n\n    /**\n     *  Returns true if %%other%% is equal to %%this%%.\n     */\n     eq(other: FixedNumber): boolean { return this.cmp(other) === 0; }\n\n    /**\n     *  Returns true if %%other%% is less than to %%this%%.\n     */\n     lt(other: FixedNumber): boolean { return this.cmp(other) < 0; }\n\n    /**\n     *  Returns true if %%other%% is less than or equal to %%this%%.\n     */\n     lte(other: FixedNumber): boolean { return this.cmp(other) <= 0; }\n\n    /**\n     *  Returns true if %%other%% is greater than to %%this%%.\n     */\n     gt(other: FixedNumber): boolean { return this.cmp(other) > 0; }\n\n    /**\n     *  Returns true if %%other%% is greater than or equal to %%this%%.\n     */\n     gte(other: FixedNumber): boolean { return this.cmp(other) >= 0; }\n\n    /**\n     *  Returns a new [[FixedNumber]] which is the largest **integer**\n     *  that is less than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */\n    floor(): FixedNumber {\n        let val = this.#val;\n        if (this.#val < BN_0) { val -= this.#tens - BN_1; }\n        val = (this.#val / this.#tens) * this.#tens;\n        return this.#checkValue(val, \"floor\");\n    }\n\n    /**\n     *  Returns a new [[FixedNumber]] which is the smallest **integer**\n     *  that is greater than or equal to %%this%%.\n     *\n     *  The decimal component of the result will always be ``0``.\n     */\n    ceiling(): FixedNumber {\n        let val = this.#val;\n        if (this.#val > BN_0) { val += this.#tens - BN_1; }\n        val = (this.#val / this.#tens) * this.#tens;\n        return this.#checkValue(val, \"ceiling\");\n    }\n\n    /**\n     *  Returns a new [[FixedNumber]] with the decimal component\n     *  rounded up on ties at %%decimals%% places.\n     */\n    round(decimals?: number): FixedNumber {\n        if (decimals == null) { decimals = 0; }\n\n        // Not enough precision to not already be rounded\n        if (decimals >= this.decimals) { return this; }\n\n        const delta = this.decimals - decimals;\n        const bump = BN_5 * getTens(delta - 1);\n\n        let value = this.value + bump;\n        const tens = getTens(delta);\n        value = (value / tens) * tens;\n\n        checkValue(value, this.#format, \"round\");\n\n        return new FixedNumber(_guard, value, this.#format);\n    }\n\n    /**\n     *  Returns true if %%this%% is equal to ``0``.\n     */\n    isZero(): boolean { return (this.#val === BN_0); }\n\n    /**\n     *  Returns true if %%this%% is less than ``0``.\n     */\n    isNegative(): boolean { return (this.#val < BN_0); }\n\n    /**\n     *  Returns the string representation of %%this%%.\n     */\n    toString(): string { return this._value; }\n\n    /**\n     *  Returns a float approximation.\n     *\n     *  Due to IEEE 754 precission (or lack thereof), this function\n     *  can only return an approximation and most values will contain\n     *  rounding errors.\n     */\n    toUnsafeFloat(): number { return parseFloat(this.toString()); }\n\n    /**\n     *  Return a new [[FixedNumber]] with the same value but has had\n     *  its field set to %%format%%.\n     *\n     *  This will throw if the value cannot fit into %%format%%.\n     */\n    toFormat(format: FixedFormat): FixedNumber {\n        return FixedNumber.fromString(this.toString(), format);\n    }\n\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% divided by\n     *  %%decimal%% places with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n     *  or underflow (precision loss).\n     */\n    static fromValue(_value: BigNumberish, _decimals?: Numeric, _format?: FixedFormat): FixedNumber {\n        const decimals = (_decimals == null) ? 0: getNumber(_decimals);\n        const format = getFormat(_format);\n\n        let value = getBigInt(_value, \"value\");\n        const delta = decimals - format.decimals;\n        if (delta > 0) {\n            const tens = getTens(delta);\n            assert((value % tens) === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n                operation: \"fromValue\", fault: \"underflow\", value: _value\n            });\n            value /= tens;\n        } else if (delta < 0) {\n            value *= getTens(-delta);\n        }\n\n        checkValue(value, format, \"fromValue\");\n\n        return new FixedNumber(_guard, value, format);\n    }\n\n    /**\n     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%%, either due to overflow or underflow (precision loss).\n     */\n    static fromString(_value: string, _format?: FixedFormat): FixedNumber {\n        const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n        assertArgument(match && (match[2].length + match[3].length) > 0, \"invalid FixedNumber string value\", \"value\", _value);\n\n        const format = getFormat(_format);\n\n        let whole = (match[2] || \"0\"), decimal = (match[3] || \"\");\n\n        // Pad out the decimals\n        while (decimal.length < format.decimals) { decimal += Zeros; }\n\n        // Check precision is safe\n        assert(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n            operation: \"fromString\", fault: \"underflow\", value: _value\n        });\n\n        // Remove extra padding\n        decimal = decimal.substring(0, format.decimals);\n\n        const value = BigInt(match[1] + whole + decimal)\n\n        checkValue(value, format, \"fromString\");\n\n        return new FixedNumber(_guard, value, format);\n    }\n\n    /**\n     *  Creates a new [[FixedNumber]] with the big-endian representation\n     *  %%value%% with %%format%%.\n     *\n     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n     *  in %%format%% due to overflow.\n     */\n    static fromBytes(_value: BytesLike, _format?: FixedFormat): FixedNumber {\n        let value = toBigInt(getBytes(_value, \"value\"));\n        const format = getFormat(_format);\n\n        if (format.signed) { value = fromTwos(value, format.width); }\n\n        checkValue(value, format, \"fromBytes\");\n\n        return new FixedNumber(_guard, value, format);\n    }\n}\n\n//const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n//console.log(f1.divSignal(f2));\n//const BUMP = FixedNumber.from(\"0.5\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}