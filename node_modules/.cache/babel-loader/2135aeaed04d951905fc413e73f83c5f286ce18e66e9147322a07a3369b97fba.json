{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number(value >> _32n & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n  constructor(blockLen, outputLen, padOffset, isLE) {\n    super();\n    this.blockLen = blockLen;\n    this.outputLen = outputLen;\n    this.padOffset = padOffset;\n    this.isLE = isLE;\n    this.finished = false;\n    this.length = 0;\n    this.pos = 0;\n    this.destroyed = false;\n    this.buffer = new Uint8Array(blockLen);\n    this.view = (0, utils_js_1.createView)(this.buffer);\n  }\n  update(data) {\n    _assert_js_1.default.exists(this);\n    const {\n      view,\n      buffer,\n      blockLen\n    } = this;\n    data = (0, utils_js_1.toBytes)(data);\n    const len = data.length;\n    for (let pos = 0; pos < len;) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = (0, utils_js_1.createView)(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out) {\n    _assert_js_1.default.exists(this);\n    _assert_js_1.default.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const {\n      buffer,\n      view,\n      blockLen,\n      isLE\n    } = this;\n    let {\n      pos\n    } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = (0, utils_js_1.createView)(out);\n    this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n  }\n  digest() {\n    const {\n      buffer,\n      outputLen\n    } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to) {\n    to || (to = new this.constructor());\n    to.set(...this.get());\n    const {\n      blockLen,\n      buffer,\n      length,\n      finished,\n      destroyed,\n      pos\n    } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\nexports.SHA2 = SHA2;","map":{"version":3,"names":["Object","defineProperty","exports","value","SHA2","_assert_js_1","require","utils_js_1","setBigUint64","view","byteOffset","isLE","_32n","BigInt","_u32_max","wh","Number","wl","h","l","setUint32","Hash","constructor","blockLen","outputLen","padOffset","finished","length","pos","destroyed","buffer","Uint8Array","createView","update","data","default","exists","toBytes","len","take","Math","min","dataView","process","set","subarray","roundClean","digestInto","out","output","fill","i","oview","get","forEach","v","digest","res","slice","destroy","_cloneInto","to"],"sources":["/home/nikola/Desktop/Projekat/friendship-dapp/node_modules/@noble/hashes/_sha2.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}