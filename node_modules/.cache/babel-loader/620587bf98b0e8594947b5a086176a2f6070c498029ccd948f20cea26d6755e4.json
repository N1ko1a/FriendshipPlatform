{"ast":null,"code":"\"use strict\";\n\n/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keccak256 = void 0;\nconst sha3_1 = require(\"@noble/hashes/sha3\");\nconst index_js_1 = require(\"../utils/index.js\");\nlet locked = false;\nconst _keccak256 = function (data) {\n  return (0, sha3_1.keccak_256)(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nfunction keccak256(_data) {\n  const data = (0, index_js_1.getBytes)(_data, \"data\");\n  return (0, index_js_1.hexlify)(__keccak256(data));\n}\nexports.keccak256 = keccak256;\nkeccak256._ = _keccak256;\nkeccak256.lock = function () {\n  locked = true;\n};\nkeccak256.register = function (func) {\n  if (locked) {\n    throw new TypeError(\"keccak256 is locked\");\n  }\n  __keccak256 = func;\n};\nObject.freeze(keccak256);","map":{"version":3,"names":["sha3_1","require","index_js_1","locked","_keccak256","data","keccak_256","__keccak256","keccak256","_data","getBytes","hexlify","exports","_","lock","register","func","TypeError","Object","freeze"],"sources":["/home/nikola/Nikola/GitHub/FriendshipPlatform/node_modules/ethers/src.ts/crypto/keccak.ts"],"sourcesContent":["/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\n\nimport { keccak_256 } from \"@noble/hashes/sha3\";\n\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _keccak256 = function(data: Uint8Array): Uint8Array {\n    return keccak_256(data);\n}\n\nlet __keccak256: (data: Uint8Array) => BytesLike = _keccak256;\n\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nexport function keccak256(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__keccak256(data));\n}\nkeccak256._ = _keccak256;\nkeccak256.lock = function(): void { locked = true; }\nkeccak256.register = function(func: (data: Uint8Array) => BytesLike) {\n    if (locked) { throw new TypeError(\"keccak256 is locked\"); }\n    __keccak256 = func;\n}\nObject.freeze(keccak256);\n"],"mappings":";;AAAA;;;;;;;;;AAMA,MAAAA,MAAA,GAAAC,OAAA;AAEA,MAAAC,UAAA,GAAAD,OAAA;AAKA,IAAIE,MAAM,GAAG,KAAK;AAElB,MAAMC,UAAU,GAAG,SAAAA,CAASC,IAAgB;EACxC,OAAO,IAAAL,MAAA,CAAAM,UAAU,EAACD,IAAI,CAAC;AAC3B,CAAC;AAED,IAAIE,WAAW,GAAoCH,UAAU;AAE7D;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAAgBI,SAASA,CAACC,KAAgB;EACtC,MAAMJ,IAAI,GAAG,IAAAH,UAAA,CAAAQ,QAAQ,EAACD,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,IAAAP,UAAA,CAAAS,OAAO,EAACJ,WAAW,CAACF,IAAI,CAAC,CAAC;AACrC;AAHAO,OAAA,CAAAJ,SAAA,GAAAA,SAAA;AAIAA,SAAS,CAACK,CAAC,GAAGT,UAAU;AACxBI,SAAS,CAACM,IAAI,GAAG;EAAmBX,MAAM,GAAG,IAAI;AAAE,CAAC;AACpDK,SAAS,CAACO,QAAQ,GAAG,UAASC,IAAqC;EAC/D,IAAIb,MAAM,EAAE;IAAE,MAAM,IAAIc,SAAS,CAAC,qBAAqB,CAAC;;EACxDV,WAAW,GAAGS,IAAI;AACtB,CAAC;AACDE,MAAM,CAACC,MAAM,CAACX,SAAS,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}