{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scryptAsync = exports.scrypt = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst sha256_js_1 = require(\"./sha256.js\");\nconst pbkdf2_js_1 = require(\"./pbkdf2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b) => a << b | a >>> 32 - b;\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++],\n    y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++],\n    y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++],\n    y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++],\n    y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++],\n    y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++],\n    y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++],\n    y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++],\n    y15 = prev[pi++] ^ input[ii++];\n  // Save state to temporary variables (salsa)\n  let x00 = y00,\n    x01 = y01,\n    x02 = y02,\n    x03 = y03,\n    x04 = y04,\n    x05 = y05,\n    x06 = y06,\n    x07 = y07,\n    x08 = y08,\n    x09 = y09,\n    x10 = y10,\n    x11 = y11,\n    x12 = y12,\n    x13 = y13,\n    x14 = y14,\n    x15 = y15;\n  // Main loop (salsa)\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0, 7);\n    x08 ^= rotl(x04 + x00 | 0, 9);\n    x12 ^= rotl(x08 + x04 | 0, 13);\n    x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0, 7);\n    x13 ^= rotl(x09 + x05 | 0, 9);\n    x01 ^= rotl(x13 + x09 | 0, 13);\n    x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0, 7);\n    x02 ^= rotl(x14 + x10 | 0, 9);\n    x06 ^= rotl(x02 + x14 | 0, 13);\n    x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0, 7);\n    x07 ^= rotl(x03 + x15 | 0, 9);\n    x11 ^= rotl(x07 + x03 | 0, 13);\n    x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0, 7);\n    x02 ^= rotl(x01 + x00 | 0, 9);\n    x03 ^= rotl(x02 + x01 | 0, 13);\n    x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0, 7);\n    x07 ^= rotl(x06 + x05 | 0, 9);\n    x04 ^= rotl(x07 + x06 | 0, 13);\n    x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0, 7);\n    x08 ^= rotl(x11 + x10 | 0, 9);\n    x09 ^= rotl(x08 + x11 | 0, 13);\n    x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0, 7);\n    x13 ^= rotl(x12 + x15 | 0, 9);\n    x14 ^= rotl(x13 + x12 | 0, 13);\n    x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output (salsa)\n  out[oi++] = y00 + x00 | 0;\n  out[oi++] = y01 + x01 | 0;\n  out[oi++] = y02 + x02 | 0;\n  out[oi++] = y03 + x03 | 0;\n  out[oi++] = y04 + x04 | 0;\n  out[oi++] = y05 + x05 | 0;\n  out[oi++] = y06 + x06 | 0;\n  out[oi++] = y07 + x07 | 0;\n  out[oi++] = y08 + x08 | 0;\n  out[oi++] = y09 + x09 | 0;\n  out[oi++] = y10 + x10 | 0;\n  out[oi++] = y11 + x11 | 0;\n  out[oi++] = y12 + x12 | 0;\n  out[oi++] = y13 + x13 | 0;\n  out[oi++] = y14 + x14 | 0;\n  out[oi++] = y15 + x15 | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n    XorAndSalsa(out, head, input, ii += 16, out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = (0, utils_js_1.checkOpts)({\n    dkLen: 32,\n    asyncTick: 10,\n    maxmem: 1024 ** 3 + 1024\n  }, _opts);\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    asyncTick,\n    maxmem,\n    onProgress\n  } = opts;\n  _assert_js_1.default.number(N);\n  _assert_js_1.default.number(r);\n  _assert_js_1.default.number(p);\n  _assert_js_1.default.number(dkLen);\n  _assert_js_1.default.number(asyncTick);\n  _assert_js_1.default.number(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function') throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n  if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n    // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n    throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n  }\n  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {\n    throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n  }\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n  }\n  const memUsed = blockSize * (N + p);\n  if (memUsed > maxmem) {\n    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n  }\n  // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n  const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, {\n    c: 1,\n    dkLen: blockSize * p\n  });\n  const B32 = (0, utils_js_1.u32)(B);\n  // Re-used between parallel iterations. Array(iterations) of B\n  const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));\n  const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));\n  let blockMixCb = () => {};\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p;\n    // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix)) onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n  return {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb,\n    asyncTick\n  };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n  const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, {\n    c: 1,\n    dkLen\n  });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nfunction scrypt(password, salt, opts) {\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb\n  } = scryptInit(password, salt, opts);\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    }\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    }\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scrypt = scrypt;\n/**\n * Scrypt KDF from RFC 7914.\n */\nasync function scryptAsync(password, salt, opts) {\n  const {\n    N,\n    r,\n    p,\n    dkLen,\n    blockSize32,\n    V,\n    B32,\n    B,\n    tmp,\n    blockMixCb,\n    asyncTick\n  } = scryptInit(password, salt, opts);\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    let pos = 0;\n    await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, i => {\n      BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    await (0, utils_js_1.asyncLoop)(N, asyncTick, i => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    });\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scryptAsync = scryptAsync;","map":{"version":3,"names":["Object","defineProperty","exports","value","scryptAsync","scrypt","_assert_js_1","require","sha256_js_1","pbkdf2_js_1","utils_js_1","rotl","a","b","XorAndSalsa","prev","pi","input","ii","out","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","i","BlockMix","r","head","tail","scryptInit","password","salt","_opts","opts","checkOpts","dkLen","asyncTick","maxmem","N","p","onProgress","default","number","undefined","Error","blockSize","blockSize32","memUsed","B","pbkdf2","sha256","c","B32","u32","V","Uint8Array","tmp","blockMixCb","totalBlockMix","callbackPer","Math","max","floor","blockMixCnt","scryptOutput","res","fill","Pi","pos","j","k","asyncLoop"],"sources":["/home/nikola/Desktop/Kriptografija projekat Nikola Ivanovic 637-2019/friendship-dapp/node_modules/@noble/hashes/scrypt.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scryptAsync = exports.scrypt = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst sha256_js_1 = require(\"./sha256.js\");\nconst pbkdf2_js_1 = require(\"./pbkdf2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = (0, utils_js_1.checkOpts)({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    _assert_js_1.default.number(N);\n    _assert_js_1.default.number(r);\n    _assert_js_1.default.number(p);\n    _assert_js_1.default.number(dkLen);\n    _assert_js_1.default.number(asyncTick);\n    _assert_js_1.default.number(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n    }\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = (0, utils_js_1.u32)(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));\n    const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nfunction scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scrypt = scrypt;\n/**\n * Scrypt KDF from RFC 7914.\n */\nasync function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, (i) => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await (0, utils_js_1.asyncLoop)(N, asyncTick, (i) => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scryptAsync = scryptAsync;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}