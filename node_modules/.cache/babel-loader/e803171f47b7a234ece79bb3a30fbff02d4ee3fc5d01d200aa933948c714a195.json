{"ast":null,"code":"\"use strict\";\n\n/**\n *  When interacting with Ethereum, it is necessary to use a private\n *  key authenticate actions by signing a payload.\n *\n *  Wallets are the simplest way to expose the concept of an\n *  //Externally Owner Account// (EOA) as it wraps a private key\n *  and supports high-level methods to sign common types of interaction\n *  and send transactions.\n *\n *  The class most developers will want to use is [[Wallet]], which\n *  can load a private key directly or from any common wallet format.\n *\n *  The [[HDNodeWallet]] can be used when it is necessary to access\n *  low-level details of how an HD wallets are derived, exported\n *  or imported.\n *\n *  @_section: api/wallet:Wallets  [about-wallets]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallet = exports.Mnemonic = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.BaseWallet = void 0;\nvar base_wallet_js_1 = require(\"./base-wallet.js\");\nObject.defineProperty(exports, \"BaseWallet\", {\n  enumerable: true,\n  get: function () {\n    return base_wallet_js_1.BaseWallet;\n  }\n});\nvar hdwallet_js_1 = require(\"./hdwallet.js\");\nObject.defineProperty(exports, \"defaultPath\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.defaultPath;\n  }\n});\nObject.defineProperty(exports, \"getAccountPath\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.getAccountPath;\n  }\n});\nObject.defineProperty(exports, \"getIndexedAccountPath\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.getIndexedAccountPath;\n  }\n});\nObject.defineProperty(exports, \"HDNodeWallet\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.HDNodeWallet;\n  }\n});\nObject.defineProperty(exports, \"HDNodeVoidWallet\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.HDNodeVoidWallet;\n  }\n});\nvar json_crowdsale_js_1 = require(\"./json-crowdsale.js\");\nObject.defineProperty(exports, \"isCrowdsaleJson\", {\n  enumerable: true,\n  get: function () {\n    return json_crowdsale_js_1.isCrowdsaleJson;\n  }\n});\nObject.defineProperty(exports, \"decryptCrowdsaleJson\", {\n  enumerable: true,\n  get: function () {\n    return json_crowdsale_js_1.decryptCrowdsaleJson;\n  }\n});\nvar json_keystore_js_1 = require(\"./json-keystore.js\");\nObject.defineProperty(exports, \"isKeystoreJson\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.isKeystoreJson;\n  }\n});\nObject.defineProperty(exports, \"decryptKeystoreJsonSync\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.decryptKeystoreJsonSync;\n  }\n});\nObject.defineProperty(exports, \"decryptKeystoreJson\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.decryptKeystoreJson;\n  }\n});\nObject.defineProperty(exports, \"encryptKeystoreJson\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.encryptKeystoreJson;\n  }\n});\nObject.defineProperty(exports, \"encryptKeystoreJsonSync\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.encryptKeystoreJsonSync;\n  }\n});\nvar mnemonic_js_1 = require(\"./mnemonic.js\");\nObject.defineProperty(exports, \"Mnemonic\", {\n  enumerable: true,\n  get: function () {\n    return mnemonic_js_1.Mnemonic;\n  }\n});\nvar wallet_js_1 = require(\"./wallet.js\");\nObject.defineProperty(exports, \"Wallet\", {\n  enumerable: true,\n  get: function () {\n    return wallet_js_1.Wallet;\n  }\n});","map":{"version":3,"names":["base_wallet_js_1","require","Object","defineProperty","exports","enumerable","get","BaseWallet","hdwallet_js_1","defaultPath","getAccountPath","getIndexedAccountPath","HDNodeWallet","HDNodeVoidWallet","json_crowdsale_js_1","isCrowdsaleJson","decryptCrowdsaleJson","json_keystore_js_1","isKeystoreJson","decryptKeystoreJsonSync","decryptKeystoreJson","encryptKeystoreJson","encryptKeystoreJsonSync","mnemonic_js_1","Mnemonic","wallet_js_1","Wallet"],"sources":["/home/nikola/Desktop/Projekat/friendship-dapp/node_modules/ethers/src.ts/wallet/index.ts"],"sourcesContent":["/**\n *  When interacting with Ethereum, it is necessary to use a private\n *  key authenticate actions by signing a payload.\n *\n *  Wallets are the simplest way to expose the concept of an\n *  //Externally Owner Account// (EOA) as it wraps a private key\n *  and supports high-level methods to sign common types of interaction\n *  and send transactions.\n *\n *  The class most developers will want to use is [[Wallet]], which\n *  can load a private key directly or from any common wallet format.\n *\n *  The [[HDNodeWallet]] can be used when it is necessary to access\n *  low-level details of how an HD wallets are derived, exported\n *  or imported.\n *\n *  @_section: api/wallet:Wallets  [about-wallets]\n */\n\nexport { BaseWallet } from \"./base-wallet.js\";\n\nexport {\n    defaultPath,\n\n    getAccountPath, getIndexedAccountPath,\n\n    HDNodeWallet,\n    HDNodeVoidWallet,\n} from \"./hdwallet.js\";\n\nexport { isCrowdsaleJson, decryptCrowdsaleJson } from \"./json-crowdsale.js\";\n\nexport {\n    isKeystoreJson,\n    decryptKeystoreJsonSync, decryptKeystoreJson,\n    encryptKeystoreJson, encryptKeystoreJsonSync\n} from \"./json-keystore.js\";\n\nexport { Mnemonic } from \"./mnemonic.js\";\n\nexport { Wallet } from \"./wallet.js\";\n\n\nexport type { CrowdsaleAccount } from \"./json-crowdsale.js\";\nexport type {\n    KeystoreAccount, EncryptOptions\n} from \"./json-keystore.js\"\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAAA,gBAAA,GAAAC,OAAA;AAASC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAN,gBAAA,CAAAO,UAAU;EAAA;AAAA;AAEnB,IAAAC,aAAA,GAAAP,OAAA;AACIC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAE,aAAA,CAAAC,WAAW;EAAA;AAAA;AAEXP,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAE,aAAA,CAAAE,cAAc;EAAA;AAAA;AAAER,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAE,aAAA,CAAAG,qBAAqB;EAAA;AAAA;AAErCT,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAE,aAAA,CAAAI,YAAY;EAAA;AAAA;AACZV,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAE,aAAA,CAAAK,gBAAgB;EAAA;AAAA;AAGpB,IAAAC,mBAAA,GAAAb,OAAA;AAASC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAQ,mBAAA,CAAAC,eAAe;EAAA;AAAA;AAAEb,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAQ,mBAAA,CAAAE,oBAAoB;EAAA;AAAA;AAE9C,IAAAC,kBAAA,GAAAhB,OAAA;AACIC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAW,kBAAA,CAAAC,cAAc;EAAA;AAAA;AACdhB,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAW,kBAAA,CAAAE,uBAAuB;EAAA;AAAA;AAAEjB,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAW,kBAAA,CAAAG,mBAAmB;EAAA;AAAA;AAC5ClB,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAW,kBAAA,CAAAI,mBAAmB;EAAA;AAAA;AAAEnB,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAW,kBAAA,CAAAK,uBAAuB;EAAA;AAAA;AAGhD,IAAAC,aAAA,GAAAtB,OAAA;AAASC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAiB,aAAA,CAAAC,QAAQ;EAAA;AAAA;AAEjB,IAAAC,WAAA,GAAAxB,OAAA;AAASC,MAAA,CAAAC,cAAA,CAAAC,OAAA;EAAAC,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAmB,WAAA,CAAAC,MAAM;EAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}