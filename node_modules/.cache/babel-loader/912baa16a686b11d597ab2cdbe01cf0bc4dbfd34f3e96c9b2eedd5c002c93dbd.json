{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlchemyProvider = void 0;\n/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.alchemyapi.io\";\n    case \"goerli\":\n      return \"eth-goerli.g.alchemy.com\";\n    case \"sepolia\":\n      return \"eth-sepolia.g.alchemy.com\";\n    case \"arbitrum\":\n      return \"arb-mainnet.g.alchemy.com\";\n    case \"arbitrum-goerli\":\n      return \"arb-goerli.g.alchemy.com\";\n    case \"matic\":\n      return \"polygon-mainnet.g.alchemy.com\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.g.alchemy.com\";\n    case \"optimism\":\n      return \"opt-mainnet.g.alchemy.com\";\n    case \"optimism-goerli\":\n      return \"opt-goerli.g.alchemy.com\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nclass AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  apiKey;\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = AlchemyProvider.getRequest(network, apiKey);\n    super(request, network, {\n      staticNetwork: network\n    });\n    (0, index_js_1.defineProperties)(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new AlchemyProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  async _perform(req) {\n    // https://docs.alchemy.com/reference/trace-transaction\n    if (req.method === \"getTransactionResult\") {\n      const {\n        trace,\n        tx\n      } = await (0, index_js_1.resolveProperties)({\n        trace: this.send(\"trace_transaction\", [req.hash]),\n        tx: this.getTransaction(req.hash)\n      });\n      if (trace == null || tx == null) {\n        return null;\n      }\n      let data;\n      let error = false;\n      try {\n        data = trace[0].result.output;\n        error = trace[0].error === \"Reverted\";\n      } catch (error) {}\n      if (data) {\n        (0, index_js_1.assert)(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n          action: \"getTransactionResult\",\n          data,\n          reason: null,\n          transaction: tx,\n          invocation: null,\n          revert: null // @TODO\n        });\n\n        return data;\n      }\n      (0, index_js_1.assert)(false, \"could not parse trace result\", \"BAD_DATA\", {\n        value: trace\n      });\n    }\n    return await super._perform(req);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v2/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"alchemy\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\nexports.AlchemyProvider = AlchemyProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","defaultApiKey","getHost","name","assertArgument","AlchemyProvider","JsonRpcProvider","apiKey","constructor","_network","network","Network","from","request","getRequest","staticNetwork","defineProperties","_getProvider","chainId","error","_perform","req","method","trace","tx","resolveProperties","send","hash","getTransaction","data","result","output","assert","action","reason","transaction","invocation","revert","value","isCommunityResource","FetchRequest","allowGzip","retryFunc","response","attempt","showThrottleMessage","exports"],"sources":["/home/nikola/Desktop/Kriptografija projekat Nikola Ivanovic 637-2019/friendship-dapp/node_modules/ethers/src.ts/providers/provider-alchemy.ts"],"sourcesContent":["/**\n *  About Alchemy\n *\n *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]\n */\nimport {\n    defineProperties, resolveProperties, assert, assertArgument,\n    FetchRequest\n} from \"../utils/index.js\";\n\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { AbstractProvider, PerformActionRequest } from \"./abstract-provider.js\";\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nfunction getHost(name: string): string {\n    switch(name) {\n        case \"mainnet\":\n            return \"eth-mainnet.alchemyapi.io\";\n        case \"goerli\":\n            return \"eth-goerli.g.alchemy.com\";\n        case \"sepolia\":\n            return \"eth-sepolia.g.alchemy.com\";\n\n        case \"arbitrum\":\n            return \"arb-mainnet.g.alchemy.com\";\n        case \"arbitrum-goerli\":\n            return \"arb-goerli.g.alchemy.com\";\n        case \"matic\":\n            return \"polygon-mainnet.g.alchemy.com\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai.g.alchemy.com\";\n        case \"optimism\":\n            return \"opt-mainnet.g.alchemy.com\";\n        case \"optimism-goerli\":\n            return \"opt-goerli.g.alchemy.com\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n/**\n *  The **AlchemyProvider** connects to the [[link-alchemy]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-alchemy-signup).\n *\n *  @_docloc: api/providers/thirdparty\n */\nexport class AlchemyProvider extends JsonRpcProvider implements CommunityResourcable {\n    readonly apiKey!: string;\n\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = AlchemyProvider.getRequest(network, apiKey);\n        super(request, network, { staticNetwork: network });\n\n        defineProperties<AlchemyProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AlchemyProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    async _perform(req: PerformActionRequest): Promise<any> {\n\n        // https://docs.alchemy.com/reference/trace-transaction\n        if (req.method === \"getTransactionResult\") {\n            const { trace, tx } = await resolveProperties({\n                trace: this.send(\"trace_transaction\", [ req.hash ]),\n                tx: this.getTransaction(req.hash)\n            });\n            if (trace == null || tx == null) { return null; }\n\n            let data: undefined | string;\n            let error = false;\n            try {\n                data = trace[0].result.output;\n                error = (trace[0].error === \"Reverted\");\n            } catch (error) { }\n\n            if (data) {\n                assert(!error, \"an error occurred during transaction executions\", \"CALL_EXCEPTION\", {\n                    action: \"getTransactionResult\",\n                    data,\n                    reason: null,\n                    transaction: tx,\n                    invocation: null,\n                    revert: null // @TODO\n                });\n                return data;\n            }\n\n            assert(false, \"could not parse trace result\", \"BAD_DATA\", { value: trace });\n        }\n\n        return await super._perform(req);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getRequest(network: Network, apiKey?: string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v2/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"alchemy\");\n                return true;\n            }\n        }\n\n        return request;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}