{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCreate2Address = exports.getCreateAddress = void 0;\nconst index_js_1 = require(\"../crypto/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst address_js_1 = require(\"./address.js\");\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */\nfunction getCreateAddress(tx) {\n  const from = (0, address_js_1.getAddress)(tx.from);\n  const nonce = (0, index_js_2.getBigInt)(tx.nonce, \"tx.nonce\");\n  let nonceHex = nonce.toString(16);\n  if (nonceHex === \"0\") {\n    nonceHex = \"0x\";\n  } else if (nonceHex.length % 2) {\n    nonceHex = \"0x0\" + nonceHex;\n  } else {\n    nonceHex = \"0x\" + nonceHex;\n  }\n  return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.encodeRlp)([from, nonceHex])), 12));\n}\nexports.getCreateAddress = getCreateAddress;\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */\nfunction getCreate2Address(_from, _salt, _initCodeHash) {\n  const from = (0, address_js_1.getAddress)(_from);\n  const salt = (0, index_js_2.getBytes)(_salt, \"salt\");\n  const initCodeHash = (0, index_js_2.getBytes)(_initCodeHash, \"initCodeHash\");\n  (0, index_js_2.assertArgument)(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n  (0, index_js_2.assertArgument)(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n  return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.concat)([\"0xff\", from, salt, initCodeHash])), 12));\n}\nexports.getCreate2Address = getCreate2Address;","map":{"version":3,"names":["index_js_1","require","index_js_2","address_js_1","getCreateAddress","tx","from","getAddress","nonce","getBigInt","nonceHex","toString","length","dataSlice","keccak256","encodeRlp","exports","getCreate2Address","_from","_salt","_initCodeHash","salt","getBytes","initCodeHash","assertArgument","concat"],"sources":["/home/nikola/Nikola/GitHub/FriendshipPlatform/node_modules/ethers/src.ts/address/contract-address.ts"],"sourcesContent":["import { keccak256 } from \"../crypto/index.js\";\nimport {\n    concat, dataSlice, getBigInt, getBytes, encodeRlp, assertArgument\n} from \"../utils/index.js\";\n\nimport { getAddress } from \"./address.js\";\n\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\n\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */\nexport function getCreateAddress(tx: { from: string, nonce: BigNumberish }): string {\n    const from = getAddress(tx.from);\n    const nonce = getBigInt(tx.nonce, \"tx.nonce\");\n\n    let nonceHex = nonce.toString(16);\n    if (nonceHex === \"0\") {\n        nonceHex = \"0x\";\n    } else if (nonceHex.length % 2) {\n        nonceHex = \"0x0\" + nonceHex;\n    } else {\n        nonceHex = \"0x\" + nonceHex;\n    }\n\n    return getAddress(dataSlice(keccak256(encodeRlp([ from, nonceHex ])), 12));\n}\n\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */\nexport function getCreate2Address(_from: string, _salt: BytesLike, _initCodeHash: BytesLike): string {\n    const from = getAddress(_from);\n    const salt = getBytes(_salt, \"salt\");\n    const initCodeHash = getBytes(_initCodeHash, \"initCodeHash\");\n\n    assertArgument(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n\n    assertArgument(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n\n    return getAddress(dataSlice(keccak256(concat([ \"0xff\", from, salt, initCodeHash ])), 12))\n}\n"],"mappings":";;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,UAAA,GAAAD,OAAA;AAIA,MAAAE,YAAA,GAAAF,OAAA;AAKA;AAEA;;;;;;;;;;;;;;;;;;AAkBA,SAAgBG,gBAAgBA,CAACC,EAAyC;EACtE,MAAMC,IAAI,GAAG,IAAAH,YAAA,CAAAI,UAAU,EAACF,EAAE,CAACC,IAAI,CAAC;EAChC,MAAME,KAAK,GAAG,IAAAN,UAAA,CAAAO,SAAS,EAACJ,EAAE,CAACG,KAAK,EAAE,UAAU,CAAC;EAE7C,IAAIE,QAAQ,GAAGF,KAAK,CAACG,QAAQ,CAAC,EAAE,CAAC;EACjC,IAAID,QAAQ,KAAK,GAAG,EAAE;IAClBA,QAAQ,GAAG,IAAI;GAClB,MAAM,IAAIA,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;IAC5BF,QAAQ,GAAG,KAAK,GAAGA,QAAQ;GAC9B,MAAM;IACHA,QAAQ,GAAG,IAAI,GAAGA,QAAQ;;EAG9B,OAAO,IAAAP,YAAA,CAAAI,UAAU,EAAC,IAAAL,UAAA,CAAAW,SAAS,EAAC,IAAAb,UAAA,CAAAc,SAAS,EAAC,IAAAZ,UAAA,CAAAa,SAAS,EAAC,CAAET,IAAI,EAAEI,QAAQ,CAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC9E;AAdAM,OAAA,CAAAZ,gBAAA,GAAAA,gBAAA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAgBa,iBAAiBA,CAACC,KAAa,EAAEC,KAAgB,EAAEC,aAAwB;EACvF,MAAMd,IAAI,GAAG,IAAAH,YAAA,CAAAI,UAAU,EAACW,KAAK,CAAC;EAC9B,MAAMG,IAAI,GAAG,IAAAnB,UAAA,CAAAoB,QAAQ,EAACH,KAAK,EAAE,MAAM,CAAC;EACpC,MAAMI,YAAY,GAAG,IAAArB,UAAA,CAAAoB,QAAQ,EAACF,aAAa,EAAE,cAAc,CAAC;EAE5D,IAAAlB,UAAA,CAAAsB,cAAc,EAACH,IAAI,CAACT,MAAM,KAAK,EAAE,EAAE,uBAAuB,EAAE,MAAM,EAAEO,KAAK,CAAC;EAE1E,IAAAjB,UAAA,CAAAsB,cAAc,EAACD,YAAY,CAACX,MAAM,KAAK,EAAE,EAAE,+BAA+B,EAAE,cAAc,EAAEQ,aAAa,CAAC;EAE1G,OAAO,IAAAjB,YAAA,CAAAI,UAAU,EAAC,IAAAL,UAAA,CAAAW,SAAS,EAAC,IAAAb,UAAA,CAAAc,SAAS,EAAC,IAAAZ,UAAA,CAAAuB,MAAM,EAAC,CAAE,MAAM,EAAEnB,IAAI,EAAEe,IAAI,EAAEE,YAAY,CAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC7F;AAVAP,OAAA,CAAAC,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}