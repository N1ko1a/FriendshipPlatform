{"ast":null,"code":"var _jsxFileName = \"/home/nikola/Desktop/Projekat/friendship-dapp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport abi from './contract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ethers = require(\"ethers\");\nconst contractAddress = '0xABcf117829a434326E159D70b84035F629AEA33C'; // Replace with the actual contract address\nconst provider = new ethers.BrowserProvider(window.ethereum);\nconst signer = await provider.getSigner();\nlet contract = new ethers.Contract(contractAddress, abi, signer);\nfunction App() {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [userAddress, setUserAddress] = useState(null);\n  const [userName, setUserName] = useState('');\n  const connect = async () => {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n    const connectedContract = new ethers.Contract(contractAddress, abi, signer);\n    const address = await signer.getAddress();\n    setContract(connectedContract);\n    setUserAddress(address);\n  };\n  const registerUser = async () => {\n    if (!contract) {\n      console.log(\"Contract not connected yet.\");\n      return;\n    }\n    const tx = await contract.registerUser(userName);\n    await tx.wait();\n    console.log('User registered:', tx.hash);\n  };\n\n  // const sendFriendRequest = async (e) => {\n  //   e.preventDefault();\n  //   try {\n  //     const tx = await contract.sendFriendRequest(toAddress);\n  //     await tx.wait();\n  //     console.log('Friend request sent:', tx.hash);\n  //   } catch (error) {\n  //     console.error('Error sending friend request:', error);\n  //   }\n  // };\n\n  // const acceptFriendRequest = async (e) => {\n  //   e.preventDefault();\n  //   try {\n  //     const tx = await contract.acceptFriendRequest(fromAddress);\n  //     await tx.wait();\n  //     console.log('Friend request accepted:', tx.hash);\n  //   } catch (error) {\n  //     console.error('Error accepting friend request:', error);\n  //   }\n  // };\n\n  // const appendToEventsLog = (text) => {\n  //   setEventsLog([...eventsLog, text]);\n  // };\n\n  // // Event listeners\n  // contract.on('NewUserRegistered', (userAddress, name) => {\n  //   const eventText = `New user registered - Address: ${userAddress}, Name: ${name}`;\n  //   appendToEventsLog(eventText);\n  // });\n\n  // contract.on('FriendRequestSent', (from, to) => {\n  //   const eventText = `Friend request sent - From: ${from}, To: ${to}`;\n  //   appendToEventsLog(eventText);\n  // });\n\n  // contract.on('FriendRequestAccepted', (from, to) => {\n  //   const eventText = `Friend request accepted - From: ${from}, To: ${to}`;\n  //   appendToEventsLog(eventText);\n  // });\n\n  //   return (\n  //     <div className=\"App\">\n  //       <h1>Friendship Contract</h1>\n  //       <button onClick={connect}>Connect</button>\n  //       <h2>Register User</h2>\n\n  //         <input type=\"text\" id='username' placeholder=\"Name\" required />\n  //         <button onClick={registerUser}>Register</button>\n\n  //       {/* <h2>Send Friend Request</h2>\n  //       <form onSubmit={sendFriendRequest}>\n  //         <input type=\"text\" value={toAddress} onChange={(e) => setToAddress(e.target.value)} placeholder=\"Friend's Address\" required />\n  //         <button type=\"submit\">Send Request</button>\n  //       </form>\n\n  //       <h2>Accept Friend Request</h2>\n  //       <form onSubmit={acceptFriendRequest}>\n  //         <input type=\"text\" value={fromAddress} onChange={(e) => setFromAddress(e.target.value)} placeholder=\"Friend's Address\" required />\n  //         <button type=\"submit\">Accept Request</button>\n  //       </form>\n\n  //       <h2>Events</h2>\n  //       <div>\n  //         {eventsLog.map((event, index) => (\n  //           <div key={index}>{event}</div>\n  //         ))}\n  //       </div> */}\n  //     </div>\n  //   );\n  //     }\n\n  // export default App;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connect,\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this), userAddress && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Connected User Address: \", userAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"username\",\n      placeholder: \"Enter username\",\n      onChange: e => setUserName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: registerUser,\n      children: \"Register User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"QkEEoBvsVoiBdaL1M2pBQjlR5A0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","abi","jsxDEV","_jsxDEV","ethers","require","contractAddress","provider","BrowserProvider","window","ethereum","signer","getSigner","contract","Contract","App","_s","setContract","userAddress","setUserAddress","userName","setUserName","connect","send","connectedContract","address","getAddress","registerUser","console","log","tx","wait","hash","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","id","placeholder","onChange","e","target","value","_c","$RefreshReg$"],"sources":["/home/nikola/Desktop/Projekat/friendship-dapp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport abi from './contract.json';\n\n\nconst ethers = require(\"ethers\");\nconst contractAddress = '0xABcf117829a434326E159D70b84035F629AEA33C'; // Replace with the actual contract address\nconst provider = new ethers.BrowserProvider(window.ethereum);\nconst signer = await provider.getSigner()\n\nlet contract = new ethers.Contract(contractAddress, abi, signer);\n\nfunction App() {\n  const [contract, setContract] = useState(null);\n  const [userAddress, setUserAddress] = useState(null);\n  const [userName, setUserName] = useState('');\n\n  const connect = async () => {\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = await provider.getSigner();\n\n    const connectedContract = new ethers.Contract(contractAddress, abi, signer);\n    const address = await signer.getAddress();\n\n    setContract(connectedContract);\n    setUserAddress(address);\n  };\n\n  const registerUser = async () => {\n    if (!contract) {\n      console.log(\"Contract not connected yet.\");\n      return;\n    }\n\n    const tx = await contract.registerUser(userName);\n    await tx.wait();\n    console.log('User registered:', tx.hash);\n  };\n\n\n  // const sendFriendRequest = async (e) => {\n  //   e.preventDefault();\n  //   try {\n  //     const tx = await contract.sendFriendRequest(toAddress);\n  //     await tx.wait();\n  //     console.log('Friend request sent:', tx.hash);\n  //   } catch (error) {\n  //     console.error('Error sending friend request:', error);\n  //   }\n  // };\n\n  // const acceptFriendRequest = async (e) => {\n  //   e.preventDefault();\n  //   try {\n  //     const tx = await contract.acceptFriendRequest(fromAddress);\n  //     await tx.wait();\n  //     console.log('Friend request accepted:', tx.hash);\n  //   } catch (error) {\n  //     console.error('Error accepting friend request:', error);\n  //   }\n  // };\n\n  // const appendToEventsLog = (text) => {\n  //   setEventsLog([...eventsLog, text]);\n  // };\n\n  // // Event listeners\n  // contract.on('NewUserRegistered', (userAddress, name) => {\n  //   const eventText = `New user registered - Address: ${userAddress}, Name: ${name}`;\n  //   appendToEventsLog(eventText);\n  // });\n\n  // contract.on('FriendRequestSent', (from, to) => {\n  //   const eventText = `Friend request sent - From: ${from}, To: ${to}`;\n  //   appendToEventsLog(eventText);\n  // });\n\n  // contract.on('FriendRequestAccepted', (from, to) => {\n  //   const eventText = `Friend request accepted - From: ${from}, To: ${to}`;\n  //   appendToEventsLog(eventText);\n  // });\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Friendship Contract</h1>\n//       <button onClick={connect}>Connect</button>\n//       <h2>Register User</h2>\n\n//         <input type=\"text\" id='username' placeholder=\"Name\" required />\n//         <button onClick={registerUser}>Register</button>\n      \n\n//       {/* <h2>Send Friend Request</h2>\n//       <form onSubmit={sendFriendRequest}>\n//         <input type=\"text\" value={toAddress} onChange={(e) => setToAddress(e.target.value)} placeholder=\"Friend's Address\" required />\n//         <button type=\"submit\">Send Request</button>\n//       </form>\n\n//       <h2>Accept Friend Request</h2>\n//       <form onSubmit={acceptFriendRequest}>\n//         <input type=\"text\" value={fromAddress} onChange={(e) => setFromAddress(e.target.value)} placeholder=\"Friend's Address\" required />\n//         <button type=\"submit\">Accept Request</button>\n//       </form>\n\n//       <h2>Events</h2>\n//       <div>\n//         {eventsLog.map((event, index) => (\n//           <div key={index}>{event}</div>\n//         ))}\n//       </div> */}\n//     </div>\n//   );\n//     }\n\n// export default App;\n\nreturn (\n  <div>\n    <button onClick={connect}>Connect</button>\n    {userAddress && <p>Connected User Address: {userAddress}</p>}\n    <input\n      type=\"text\"\n      id=\"username\"\n      placeholder=\"Enter username\"\n      onChange={(e) => setUserName(e.target.value)}\n    />\n    <button onClick={registerUser}>Register User</button>\n  </div>\n);\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}