{"ast":null,"code":"\"use strict\";\n\n/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.JsonRpcApiPollingProvider = exports.JsonRpcApiProvider = exports.JsonRpcSigner = void 0;\n// @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\nconst index_js_1 = require(\"../abi/index.js\");\nconst index_js_2 = require(\"../address/index.js\");\nconst index_js_3 = require(\"../hash/index.js\");\nconst index_js_4 = require(\"../transaction/index.js\");\nconst index_js_5 = require(\"../utils/index.js\");\nconst abstract_provider_js_1 = require(\"./abstract-provider.js\");\nconst abstract_signer_js_1 = require(\"./abstract-signer.js\");\nconst network_js_1 = require(\"./network.js\");\nconst subscriber_filterid_js_1 = require(\"./subscriber-filterid.js\");\nconst subscriber_polling_js_1 = require(\"./subscriber-polling.js\");\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n  if (value == null || Primitive.indexOf(typeof value) >= 0) {\n    return value;\n  }\n  // Keep any Addressable\n  if (typeof value.getAddress === \"function\") {\n    return value;\n  }\n  if (Array.isArray(value)) {\n    return value.map(deepCopy);\n  }\n  if (typeof value === \"object\") {\n    return Object.keys(value).reduce((accum, key) => {\n      accum[key] = value[key];\n      return accum;\n    }, {});\n  }\n  throw new Error(`should not happen: ${value} (${typeof value})`);\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nfunction isPollable(value) {\n  return value && typeof value.pollingInterval === \"number\";\n}\nconst defaultOptions = {\n  polling: false,\n  staticNetwork: null,\n  batchStallTime: 10,\n  batchMaxSize: 1 << 20,\n  batchMaxCount: 100,\n  cacheTimeout: 250,\n  pollingInterval: 4000\n};\n// @TODO: Unchecked Signers\nclass JsonRpcSigner extends abstract_signer_js_1.AbstractSigner {\n  address;\n  constructor(provider, address) {\n    super(provider);\n    address = (0, index_js_2.getAddress)(address);\n    (0, index_js_5.defineProperties)(this, {\n      address\n    });\n  }\n  connect(provider) {\n    (0, index_js_5.assert)(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"signer.connect\"\n    });\n  }\n  async getAddress() {\n    return this.address;\n  }\n  // JSON-RPC will automatially fill in nonce, etc. so we just check from\n  async populateTransaction(tx) {\n    return await this.populateCall(tx);\n  }\n  // Returns just the hash of the transaction after sent, which is what\n  // the bare JSON-RPC API does;\n  async sendUncheckedTransaction(_tx) {\n    const tx = deepCopy(_tx);\n    const promises = [];\n    // Make sure the from matches the sender\n    if (tx.from) {\n      const _from = tx.from;\n      promises.push((async () => {\n        const from = await (0, index_js_2.resolveAddress)(_from, this.provider);\n        (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n        tx.from = from;\n      })());\n    } else {\n      tx.from = this.address;\n    }\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (tx.gasLimit == null) {\n      promises.push((async () => {\n        tx.gasLimit = await this.provider.estimateGas({\n          ...tx,\n          from: this.address\n        });\n      })());\n    }\n    // The address may be an ENS name or Addressable\n    if (tx.to != null) {\n      const _to = tx.to;\n      promises.push((async () => {\n        tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);\n      })());\n    }\n    // Wait until all of our properties are filled in\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n    const hexTx = this.provider.getRpcTransaction(tx);\n    return this.provider.send(\"eth_sendTransaction\", [hexTx]);\n  }\n  async sendTransaction(tx) {\n    // This cannot be mined any earlier than any recent block\n    const blockNumber = await this.provider.getBlockNumber();\n    // Send the transaction\n    const hash = await this.sendUncheckedTransaction(tx);\n    // Unfortunately, JSON-RPC only provides and opaque transaction hash\n    // for a response, and we need the actual transaction, so we poll\n    // for it; it should show up very quickly\n    return await new Promise((resolve, reject) => {\n      const timeouts = [1000, 100];\n      const checkTx = async () => {\n        // Try getting the transaction\n        const tx = await this.provider.getTransaction(hash);\n        if (tx != null) {\n          resolve(tx.replaceableTransaction(blockNumber));\n          return;\n        }\n        // Wait another 4 seconds\n        this.provider._setTimeout(() => {\n          checkTx();\n        }, timeouts.pop() || 4000);\n      };\n      checkTx();\n    });\n  }\n  async signTransaction(_tx) {\n    const tx = deepCopy(_tx);\n    // Make sure the from matches the sender\n    if (tx.from) {\n      const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);\n      (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n      tx.from = from;\n    } else {\n      tx.from = this.address;\n    }\n    const hexTx = this.provider.getRpcTransaction(tx);\n    return await this.provider.send(\"eth_signTransaction\", [hexTx]);\n  }\n  async signMessage(_message) {\n    const message = typeof _message === \"string\" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;\n    return await this.provider.send(\"personal_sign\", [(0, index_js_5.hexlify)(message), this.address.toLowerCase()]);\n  }\n  async signTypedData(domain, types, _value) {\n    const value = deepCopy(_value);\n    // Populate any ENS names (in-place)\n    const populated = await index_js_3.TypedDataEncoder.resolveNames(domain, types, value, async value => {\n      const address = await (0, index_js_2.resolveAddress)(value);\n      (0, index_js_5.assertArgument)(address != null, \"TypedData does not support null address\", \"value\", value);\n      return address;\n    });\n    return await this.provider.send(\"eth_signTypedData_v4\", [this.address.toLowerCase(), JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n  }\n  async unlock(password) {\n    return this.provider.send(\"personal_unlockAccount\", [this.address.toLowerCase(), password, null]);\n  }\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n  async _legacySignMessage(_message) {\n    const message = typeof _message === \"string\" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;\n    return await this.provider.send(\"eth_sign\", [this.address.toLowerCase(), (0, index_js_5.hexlify)(message)]);\n  }\n}\nexports.JsonRpcSigner = JsonRpcSigner;\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nclass JsonRpcApiProvider extends abstract_provider_js_1.AbstractProvider {\n  #options;\n  // The next ID to use for the JSON-RPC ID field\n  #nextId;\n  // Payloads are queued and triggered in batches using the drainTimer\n  #payloads;\n  #drainTimer;\n  #notReady;\n  #network;\n  #scheduleDrain() {\n    if (this.#drainTimer) {\n      return;\n    }\n    // If we aren't using batching, no hard in sending it immeidately\n    const stallTime = this._getOption(\"batchMaxCount\") === 1 ? 0 : this._getOption(\"batchStallTime\");\n    this.#drainTimer = setTimeout(() => {\n      this.#drainTimer = null;\n      const payloads = this.#payloads;\n      this.#payloads = [];\n      while (payloads.length) {\n        // Create payload batches that satisfy our batch constraints\n        const batch = [payloads.shift()];\n        while (payloads.length) {\n          if (batch.length === this.#options.batchMaxCount) {\n            break;\n          }\n          batch.push(payloads.shift());\n          const bytes = JSON.stringify(batch.map(p => p.payload));\n          if (bytes.length > this.#options.batchMaxSize) {\n            payloads.unshift(batch.pop());\n            break;\n          }\n        }\n        // Process the result to each payload\n        (async () => {\n          const payload = batch.length === 1 ? batch[0].payload : batch.map(p => p.payload);\n          this.emit(\"debug\", {\n            action: \"sendRpcPayload\",\n            payload\n          });\n          try {\n            const result = await this._send(payload);\n            this.emit(\"debug\", {\n              action: \"receiveRpcResult\",\n              result\n            });\n            // Process results in batch order\n            for (const {\n              resolve,\n              reject,\n              payload\n            } of batch) {\n              if (this.destroyed) {\n                reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                  operation: payload.method\n                }));\n                continue;\n              }\n              // Find the matching result\n              const resp = result.filter(r => r.id === payload.id)[0];\n              // No result; the node failed us in unexpected ways\n              if (resp == null) {\n                const error = (0, index_js_5.makeError)(\"missing response for request\", \"BAD_DATA\", {\n                  value: result,\n                  info: {\n                    payload\n                  }\n                });\n                this.emit(\"error\", error);\n                reject(error);\n                continue;\n              }\n              // The response is an error\n              if (\"error\" in resp) {\n                reject(this.getRpcError(payload, resp));\n                continue;\n              }\n              // All good; send the result\n              resolve(resp.result);\n            }\n          } catch (error) {\n            this.emit(\"debug\", {\n              action: \"receiveRpcError\",\n              error\n            });\n            for (const {\n              reject\n            } of batch) {\n              // @TODO: augment the error with the payload\n              reject(error);\n            }\n          }\n        })();\n      }\n    }, stallTime);\n  }\n  constructor(network, options) {\n    super(network, options);\n    this.#nextId = 1;\n    this.#options = Object.assign({}, defaultOptions, options || {});\n    this.#payloads = [];\n    this.#drainTimer = null;\n    this.#network = null;\n    {\n      let resolve = null;\n      const promise = new Promise(_resolve => {\n        resolve = _resolve;\n      });\n      this.#notReady = {\n        promise,\n        resolve\n      };\n    }\n    // Make sure any static network is compatbile with the provided netwrok\n    const staticNetwork = this._getOption(\"staticNetwork\");\n    if (staticNetwork) {\n      (0, index_js_5.assertArgument)(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n      this.#network = staticNetwork;\n    }\n  }\n  /**\n   *  Returns the value associated with the option %%key%%.\n   *\n   *  Sub-classes can use this to inquire about configuration options.\n   */\n  _getOption(key) {\n    return this.#options[key];\n  }\n  /**\n   *  Gets the [[Network]] this provider has committed to. On each call, the network\n   *  is detected, and if it has changed, the call will reject.\n   */\n  get _network() {\n    (0, index_js_5.assert)(this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n    return this.#network;\n  }\n  /**\n   *  Resolves to the non-normalized value by performing %%req%%.\n   *\n   *  Sub-classes may override this to modify behavior of actions,\n   *  and should generally call ``super._perform`` as a fallback.\n   */\n  async _perform(req) {\n    // Legacy networks do not like the type field being passed along (which\n    // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n    if (req.method === \"call\" || req.method === \"estimateGas\") {\n      let tx = req.transaction;\n      if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {\n        // If there are no EIP-1559 properties, it might be non-EIP-a559\n        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n          const feeData = await this.getFeeData();\n          if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n            // Network doesn't know about EIP-1559 (and hence type)\n            req = Object.assign({}, req, {\n              transaction: Object.assign({}, tx, {\n                type: undefined\n              })\n            });\n          }\n        }\n      }\n    }\n    const request = this.getRpcRequest(req);\n    if (request != null) {\n      return await this.send(request.method, request.args);\n    }\n    return super._perform(req);\n  }\n  /**\n   *  Sub-classes may override this; it detects the *actual* network that\n   *  we are **currently** connected to.\n   *\n   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n   *  _send primitive must be used instead.\n   */\n  async _detectNetwork() {\n    const network = this._getOption(\"staticNetwork\");\n    if (network) {\n      return network;\n    }\n    // If we are ready, use ``send``, which enabled requests to be batched\n    if (this.ready) {\n      return network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send(\"eth_chainId\", [])));\n    }\n    // We are not ready yet; use the primitive _send\n    const payload = {\n      id: this.#nextId++,\n      method: \"eth_chainId\",\n      params: [],\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"sendRpcPayload\",\n      payload\n    });\n    let result;\n    try {\n      result = (await this._send(payload))[0];\n    } catch (error) {\n      this.emit(\"debug\", {\n        action: \"receiveRpcError\",\n        error\n      });\n      throw error;\n    }\n    this.emit(\"debug\", {\n      action: \"receiveRpcResult\",\n      result\n    });\n    if (\"result\" in result) {\n      return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));\n    }\n    throw this.getRpcError(payload, result);\n  }\n  /**\n   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n   *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n   *  ``super._start()`` **MUST** be called.\n   *\n   *  Calling it multiple times is safe and has no effect.\n   */\n  _start() {\n    if (this.#notReady == null || this.#notReady.resolve == null) {\n      return;\n    }\n    this.#notReady.resolve();\n    this.#notReady = null;\n    (async () => {\n      // Bootstrap the network\n      while (this.#network == null && !this.destroyed) {\n        try {\n          this.#network = await this._detectNetwork();\n        } catch (error) {\n          console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n          this.emit(\"error\", (0, index_js_5.makeError)(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", {\n            event: \"initial-network-discovery\",\n            info: {\n              error\n            }\n          }));\n          await stall(1000);\n        }\n      }\n      // Start dispatching requests\n      this.#scheduleDrain();\n    })();\n  }\n  /**\n   *  Resolves once the [[_start]] has been called. This can be used in\n   *  sub-classes to defer sending data until the connection has been\n   *  established.\n   */\n  async _waitUntilReady() {\n    if (this.#notReady == null) {\n      return;\n    }\n    return await this.#notReady.promise;\n  }\n  /**\n   *  Return a Subscriber that will manage the %%sub%%.\n   *\n   *  Sub-classes may override this to modify the behavior of\n   *  subscription management.\n   */\n  _getSubscriber(sub) {\n    // Pending Filters aren't availble via polling\n    if (sub.type === \"pending\") {\n      return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);\n    }\n    if (sub.type === \"event\") {\n      if (this._getOption(\"polling\")) {\n        return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);\n      }\n      return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);\n    }\n    // Orphaned Logs are handled automatically, by the filter, since\n    // logs with removed are emitted by it\n    if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n      return new abstract_provider_js_1.UnmanagedSubscriber(\"orphan\");\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Returns true only if the [[_start]] has been called.\n   */\n  get ready() {\n    return this.#notReady == null;\n  }\n  /**\n   *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n   *  which has all values hexlified and any numeric values converted\n   *  to Quantity values.\n   */\n  getRpcTransaction(tx) {\n    const result = {};\n    // JSON-RPC now requires numeric values to be \"quantity\" values\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      let dstKey = key;\n      if (key === \"gasLimit\") {\n        dstKey = \"gas\";\n      }\n      result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));\n    });\n    // Make sure addresses and data are lowercase\n    [\"from\", \"to\", \"data\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      result[key] = (0, index_js_5.hexlify)(tx[key]);\n    });\n    // Normalize the access list object\n    if (tx.accessList) {\n      result[\"accessList\"] = (0, index_js_4.accessListify)(tx.accessList);\n    }\n    return result;\n  }\n  /**\n   *  Returns the request method and arguments required to perform\n   *  %%req%%.\n   */\n  getRpcRequest(req) {\n    switch (req.method) {\n      case \"chainId\":\n        return {\n          method: \"eth_chainId\",\n          args: []\n        };\n      case \"getBlockNumber\":\n        return {\n          method: \"eth_blockNumber\",\n          args: []\n        };\n      case \"getGasPrice\":\n        return {\n          method: \"eth_gasPrice\",\n          args: []\n        };\n      case \"getBalance\":\n        return {\n          method: \"eth_getBalance\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getTransactionCount\":\n        return {\n          method: \"eth_getTransactionCount\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getCode\":\n        return {\n          method: \"eth_getCode\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getStorage\":\n        return {\n          method: \"eth_getStorageAt\",\n          args: [getLowerCase(req.address), \"0x\" + req.position.toString(16), req.blockTag]\n        };\n      case \"broadcastTransaction\":\n        return {\n          method: \"eth_sendRawTransaction\",\n          args: [req.signedTransaction]\n        };\n      case \"getBlock\":\n        if (\"blockTag\" in req) {\n          return {\n            method: \"eth_getBlockByNumber\",\n            args: [req.blockTag, !!req.includeTransactions]\n          };\n        } else if (\"blockHash\" in req) {\n          return {\n            method: \"eth_getBlockByHash\",\n            args: [req.blockHash, !!req.includeTransactions]\n          };\n        }\n        break;\n      case \"getTransaction\":\n        return {\n          method: \"eth_getTransactionByHash\",\n          args: [req.hash]\n        };\n      case \"getTransactionReceipt\":\n        return {\n          method: \"eth_getTransactionReceipt\",\n          args: [req.hash]\n        };\n      case \"call\":\n        return {\n          method: \"eth_call\",\n          args: [this.getRpcTransaction(req.transaction), req.blockTag]\n        };\n      case \"estimateGas\":\n        {\n          return {\n            method: \"eth_estimateGas\",\n            args: [this.getRpcTransaction(req.transaction)]\n          };\n        }\n      case \"getLogs\":\n        if (req.filter && req.filter.address != null) {\n          if (Array.isArray(req.filter.address)) {\n            req.filter.address = req.filter.address.map(getLowerCase);\n          } else {\n            req.filter.address = getLowerCase(req.filter.address);\n          }\n        }\n        return {\n          method: \"eth_getLogs\",\n          args: [req.filter]\n        };\n    }\n    return null;\n  }\n  /**\n   *  Returns an ethers-style Error for the given JSON-RPC error\n   *  %%payload%%, coalescing the various strings and error shapes\n   *  that different nodes return, coercing them into a machine-readable\n   *  standardized error.\n   */\n  getRpcError(payload, _error) {\n    const {\n      method\n    } = payload;\n    const {\n      error\n    } = _error;\n    if (method === \"eth_estimateGas\" && error.message) {\n      const msg = error.message;\n      if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n        return (0, index_js_5.makeError)(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n          transaction: payload.params[0],\n          info: {\n            payload,\n            error\n          }\n        });\n      }\n    }\n    if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n      const result = spelunkData(error);\n      const e = index_js_1.AbiCoder.getBuiltinCallException(method === \"eth_call\" ? \"call\" : \"estimateGas\", payload.params[0], result ? result.data : null);\n      e.info = {\n        error,\n        payload\n      };\n      return e;\n    }\n    // Only estimateGas and call can return arbitrary contract-defined text, so now we\n    // we can process text safely.\n    const message = JSON.stringify(spelunkMessage(error));\n    if (typeof error.message === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n      const actionMap = {\n        eth_sign: \"signMessage\",\n        personal_sign: \"signMessage\",\n        eth_signTypedData_v4: \"signTypedData\",\n        eth_signTransaction: \"signTransaction\",\n        eth_sendTransaction: \"sendTransaction\",\n        eth_requestAccounts: \"requestAccess\",\n        wallet_requestAccounts: \"requestAccess\"\n      };\n      return (0, index_js_5.makeError)(`user rejected action`, \"ACTION_REJECTED\", {\n        action: actionMap[method] || \"unknown\",\n        reason: \"rejected\",\n        info: {\n          payload,\n          error\n        }\n      });\n    }\n    if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n      const transaction = payload.params[0];\n      if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n        return (0, index_js_5.makeError)(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      if (message.match(/nonce/i) && message.match(/too low/i)) {\n        return (0, index_js_5.makeError)(\"nonce has already been used\", \"NONCE_EXPIRED\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      // \"replacement transaction underpriced\"\n      if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n        return (0, index_js_5.makeError)(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      if (message.match(/only replay-protected/i)) {\n        return (0, index_js_5.makeError)(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n          operation: method,\n          info: {\n            transaction,\n            info: {\n              error\n            }\n          }\n        });\n      }\n    }\n    let unsupported = !!message.match(/the method .* does not exist/i);\n    if (!unsupported) {\n      if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n        unsupported = true;\n      }\n    }\n    if (unsupported) {\n      return (0, index_js_5.makeError)(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n        operation: payload.method,\n        info: {\n          error,\n          payload\n        }\n      });\n    }\n    return (0, index_js_5.makeError)(\"could not coalesce error\", \"UNKNOWN_ERROR\", {\n      error,\n      payload\n    });\n  }\n  /**\n   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n   *  over the underlying channel. This can be used to call methods\n   *  on the backend that do not have a high-level API within the Provider\n   *  API.\n   *\n   *  This method queues requests according to the batch constraints\n   *  in the options, assigns the request a unique ID.\n   *\n   *  **Do NOT override** this method in sub-classes; instead\n   *  override [[_send]] or force the options values in the\n   *  call to the constructor to modify this method's behavior.\n   */\n  send(method, params) {\n    // @TODO: cache chainId?? purge on switch_networks\n    // We have been destroyed; no operations are supported anymore\n    if (this.destroyed) {\n      return Promise.reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n        operation: method\n      }));\n    }\n    const id = this.#nextId++;\n    const promise = new Promise((resolve, reject) => {\n      this.#payloads.push({\n        resolve,\n        reject,\n        payload: {\n          method,\n          params,\n          id,\n          jsonrpc: \"2.0\"\n        }\n      });\n    });\n    // If there is not a pending drainTimer, set one\n    this.#scheduleDrain();\n    return promise;\n  }\n  /**\n   *  Resolves to the [[Signer]] account for  %%address%% managed by\n   *  the client.\n   *\n   *  If the %%address%% is a number, it is used as an index in the\n   *  the accounts from [[listAccounts]].\n   *\n   *  This can only be used on clients which manage accounts (such as\n   *  Geth with imported account or MetaMask).\n   *\n   *  Throws if the account doesn't exist.\n   */\n  async getSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    const accountsPromise = this.send(\"eth_accounts\", []);\n    // Account index\n    if (typeof address === \"number\") {\n      const accounts = await accountsPromise;\n      if (address >= accounts.length) {\n        throw new Error(\"no such account\");\n      }\n      return new JsonRpcSigner(this, accounts[address]);\n    }\n    const {\n      accounts\n    } = await (0, index_js_5.resolveProperties)({\n      network: this.getNetwork(),\n      accounts: accountsPromise\n    });\n    // Account address\n    address = (0, index_js_2.getAddress)(address);\n    for (const account of accounts) {\n      if ((0, index_js_2.getAddress)(account) === address) {\n        return new JsonRpcSigner(this, address);\n      }\n    }\n    throw new Error(\"invalid account\");\n  }\n  async listAccounts() {\n    const accounts = await this.send(\"eth_accounts\", []);\n    return accounts.map(a => new JsonRpcSigner(this, a));\n  }\n  destroy() {\n    // Stop processing requests\n    if (this.#drainTimer) {\n      clearTimeout(this.#drainTimer);\n      this.#drainTimer = null;\n    }\n    // Cancel all pending requests\n    for (const {\n      payload,\n      reject\n    } of this.#payloads) {\n      reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n        operation: payload.method\n      }));\n    }\n    this.#payloads = [];\n    // Parent clean-up\n    super.destroy();\n  }\n}\nexports.JsonRpcApiProvider = JsonRpcApiProvider;\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */\nclass JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n  #pollingInterval;\n  constructor(network, options) {\n    super(network, options);\n    this.#pollingInterval = 4000;\n  }\n  _getSubscriber(sub) {\n    const subscriber = super._getSubscriber(sub);\n    if (isPollable(subscriber)) {\n      subscriber.pollingInterval = this.#pollingInterval;\n    }\n    return subscriber;\n  }\n  /**\n   *  The polling interval (default: 4000 ms)\n   */\n  get pollingInterval() {\n    return this.#pollingInterval;\n  }\n  set pollingInterval(value) {\n    if (!Number.isInteger(value) || value < 0) {\n      throw new Error(\"invalid interval\");\n    }\n    this.#pollingInterval = value;\n    this._forEachSubscriber(sub => {\n      if (isPollable(sub)) {\n        sub.pollingInterval = this.#pollingInterval;\n      }\n    });\n  }\n}\nexports.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nclass JsonRpcProvider extends JsonRpcApiPollingProvider {\n  #connect;\n  constructor(url, network, options) {\n    if (url == null) {\n      url = \"http:/\\/localhost:8545\";\n    }\n    super(network, options);\n    if (typeof url === \"string\") {\n      this.#connect = new index_js_5.FetchRequest(url);\n    } else {\n      this.#connect = url.clone();\n    }\n  }\n  _getConnection() {\n    return this.#connect.clone();\n  }\n  async send(method, params) {\n    // All requests are over HTTP, so we can just start handling requests\n    // We do this here rather than the constructor so that we don't send any\n    // requests to the network (i.e. eth_chainId) until we absolutely have to.\n    await this._start();\n    return await super.send(method, params);\n  }\n  async _send(payload) {\n    // Configure a POST connection for the requested method\n    const request = this._getConnection();\n    request.body = JSON.stringify(payload);\n    request.setHeader(\"content-type\", \"application/json\");\n    const response = await request.send();\n    response.assertOk();\n    let resp = response.bodyJson;\n    if (!Array.isArray(resp)) {\n      resp = [resp];\n    }\n    return resp;\n  }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\nfunction spelunkData(value) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {\n    return {\n      message: value.message,\n      data: value.data\n    };\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunkData(value[key]);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunkData(JSON.parse(value));\n    } catch (error) {}\n  }\n  return null;\n}\nfunction _spelunkMessage(value, result) {\n  if (value == null) {\n    return;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\") {\n    result.push(value.message);\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      _spelunkMessage(value[key], result);\n    }\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return _spelunkMessage(JSON.parse(value), result);\n    } catch (error) {}\n  }\n}\nfunction spelunkMessage(value) {\n  const result = [];\n  _spelunkMessage(value, result);\n  return result;\n}","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","index_js_4","index_js_5","abstract_provider_js_1","abstract_signer_js_1","network_js_1","subscriber_filterid_js_1","subscriber_polling_js_1","Primitive","split","deepCopy","value","indexOf","getAddress","Array","isArray","map","Object","keys","reduce","accum","key","Error","stall","duration","Promise","resolve","setTimeout","getLowerCase","toLowerCase","isPollable","pollingInterval","defaultOptions","polling","staticNetwork","batchStallTime","batchMaxSize","batchMaxCount","cacheTimeout","JsonRpcSigner","AbstractSigner","address","constructor","provider","defineProperties","connect","assert","operation","populateTransaction","tx","populateCall","sendUncheckedTransaction","_tx","promises","from","_from","push","resolveAddress","assertArgument","gasLimit","estimateGas","to","_to","length","all","hexTx","getRpcTransaction","send","sendTransaction","blockNumber","getBlockNumber","hash","reject","timeouts","checkTx","getTransaction","replaceableTransaction","_setTimeout","pop","signTransaction","signMessage","_message","message","toUtf8Bytes","hexlify","signTypedData","domain","types","_value","populated","TypedDataEncoder","resolveNames","JSON","stringify","getPayload","unlock","password","_legacySignMessage","exports","JsonRpcApiProvider","AbstractProvider","options","nextId","payloads","drainTimer","notReady","network","scheduleDrain","#scheduleDrain","stallTime","_getOption","batch","shift","bytes","p","payload","unshift","emit","action","result","_send","destroyed","makeError","method","resp","filter","r","id","error","info","getRpcError","assign","promise","_resolve","matches","_network","_perform","req","transaction","type","getBigInt","maxFeePerGas","maxPriorityFeePerGas","feeData","getFeeData","undefined","request","getRpcRequest","args","_detectNetwork","ready","Network","params","jsonrpc","_start","console","log","event","_waitUntilReady","_getSubscriber","sub","FilterIdPendingSubscriber","PollingEventSubscriber","FilterIdEventSubscriber","orphan","UnmanagedSubscriber","forEach","dstKey","toQuantity","accessList","accessListify","blockTag","position","toString","signedTransaction","includeTransactions","blockHash","_error","msg","match","spelunkData","e","AbiCoder","getBuiltinCallException","data","spelunkMessage","actionMap","eth_sign","personal_sign","eth_signTypedData_v4","eth_signTransaction","eth_sendTransaction","eth_requestAccounts","wallet_requestAccounts","reason","unsupported","details","startsWith","getSigner","accountsPromise","accounts","resolveProperties","getNetwork","account","listAccounts","a","destroy","clearTimeout","JsonRpcApiPollingProvider","subscriber","Number","isInteger","_forEachSubscriber","JsonRpcProvider","url","FetchRequest","clone","_getConnection","body","setHeader","response","assertOk","bodyJson","isHexString","parse","_spelunkMessage"],"sources":["/home/nikola/Desktop/Kriptografija projekat Nikola Ivanovic 637-2019/friendship-dapp/node_modules/ethers/src.ts/providers/provider-jsonrpc.ts"],"sourcesContent":["/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\n\n// @TODO:\n// - Add the batching API\n\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\n\nimport { AbiCoder } from \"../abi/index.js\";\nimport { getAddress, resolveAddress } from \"../address/index.js\";\nimport { TypedDataEncoder } from \"../hash/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, hexlify, isHexString, toQuantity, toUtf8Bytes,\n    makeError, assert, assertArgument,\n    FetchRequest, resolveProperties\n} from \"../utils/index.js\";\n\nimport { AbstractProvider, UnmanagedSubscriber } from \"./abstract-provider.js\";\nimport { AbstractSigner } from \"./abstract-signer.js\";\nimport { Network } from \"./network.js\";\nimport { FilterIdEventSubscriber, FilterIdPendingSubscriber } from \"./subscriber-filterid.js\";\nimport { PollingEventSubscriber } from \"./subscriber-polling.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { PerformActionRequest, Subscriber, Subscription } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { Provider, TransactionRequest, TransactionResponse } from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\ntype Timer = ReturnType<typeof setTimeout>;\n\n\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy<T = any>(value: T): T {\n    if (value == null || Primitive.indexOf(typeof(value)) >= 0) {\n        return value;\n    }\n\n    // Keep any Addressable\n    if (typeof((<any>value).getAddress) === \"function\") {\n        return value;\n    }\n\n    if (Array.isArray(value)) { return <any>(value.map(deepCopy)); }\n\n    if (typeof(value) === \"object\") {\n        return Object.keys(value).reduce((accum, key) => {\n            accum[key] = (<any>value)[key];\n            return accum;\n        }, <any>{ });\n    }\n\n    throw new Error(`should not happen: ${ value } (${ typeof(value) })`);\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(resolve, duration); });\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\ninterface Pollable {\n    pollingInterval: number;\n}\n\nfunction isPollable(value: any): value is Pollable {\n    return (value && typeof(value.pollingInterval) === \"number\");\n}\n\n/**\n *  A JSON-RPC payload, which are sent to a JSON-RPC server.\n */\nexport type JsonRpcPayload = {\n    /**\n     *  The JSON-RPC request ID.\n     */\n    id: number;\n\n    /**\n     *  The JSON-RPC request method.\n     */\n    method: string;\n\n    /**\n     *  The JSON-RPC request parameters.\n     */\n    params: Array<any> | Record<string, any>;\n\n    /**\n     *  A required constant in the JSON-RPC specification.\n     */\n    jsonrpc: \"2.0\";\n};\n\n/**\n *  A JSON-RPC result, which are returned on success from a JSON-RPC server.\n */\nexport type JsonRpcResult = {\n    /**\n     *  The response ID to match it to the relevant request.\n     */\n    id: number;\n\n    /**\n     *  The response result.\n     */\n    result: any;\n};\n\n/**\n *  A JSON-RPC error, which are returned on failure from a JSON-RPC server.\n */\nexport type JsonRpcError = {\n    /**\n     *  The response ID to match it to the relevant request.\n     */\n    id: number;\n\n    /**\n     *  The response error.\n     */\n    error: {\n        code: number;\n        message?: string;\n        data?: any;\n    }\n};\n\n/**\n *  When subscribing to the ``\"debug\"`` event, the [[Listener]] will\n *  receive this object as the first parameter.\n */\nexport type DebugEventJsonRpcApiProvider = {\n    action: \"sendRpcPayload\",\n    payload: JsonRpcPayload | Array<JsonRpcPayload>\n} | {\n    action: \"receiveRpcResult\",\n    result: Array<JsonRpcResult | JsonRpcError>\n} | {\n    action: \"receiveRpcError\",\n    error: Error\n};\n\n/**\n *  Options for configuring a [[JsonRpcApiProvider]]. Much of this\n *  is targetted towards sub-classes, which often will not expose\n *  any of these options to their consumers.\n *\n *  **``polling``** - use the polling strategy is used immediately\n *  for events; otherwise, attempt to use filters and fall back onto\n *  polling (default: ``false``)\n *\n *  **``staticNetwork``** - do not request chain ID on requests to\n *  validate the underlying chain has not changed (default: ``null``)\n *\n *  This should **ONLY** be used if it is **certain** that the network\n *  cannot change, such as when using INFURA (since the URL dictates the\n *  network). If the network is assumed static and it does change, this\n *  can have tragic consequences. For example, this **CANNOT** be used\n *  with MetaMask, since the used can select a new network from the\n *  drop-down at any time.\n *\n *  **``batchStallTime``** - how long (ms) to aggregate requests into a\n *  single batch. ``0`` indicates batching will only encompass the current\n *  event loop. If ``batchMaxCount = 1``, this is ignored. (default: ``10``)\n *\n *  **``batchMaxSize``** - target maximum size (bytes) to allow per batch\n *  request (default: 1Mb)\n *\n *  **``batchMaxCount``** - maximum number of requests to allow in a batch.\n *  If ``batchMaxCount = 1``, then batching is disabled. (default: ``100``)\n *\n *  **``cacheTimeout``** - passed as [[AbstractProviderOptions]].\n */\nexport type JsonRpcApiProviderOptions = {\n    polling?: boolean;\n    staticNetwork?: null | Network;\n    batchStallTime?: number;\n    batchMaxSize?: number;\n    batchMaxCount?: number;\n\n    cacheTimeout?: number;\n    pollingInterval?: number;\n};\n\nconst defaultOptions = {\n    polling: false,\n    staticNetwork: null,\n\n    batchStallTime: 10,      // 10ms\n    batchMaxSize: (1 << 20), // 1Mb\n    batchMaxCount: 100,      // 100 requests\n\n    cacheTimeout: 250,\n    pollingInterval: 4000\n}\n\n/**\n *  A **JsonRpcTransactionRequest** is formatted as needed by the JSON-RPC\n *  Ethereum API specification.\n */\nexport interface JsonRpcTransactionRequest {\n     /**\n      *  The sender address to use when signing.\n      */\n     from?: string;\n\n     /**\n      *  The target address.\n      */\n     to?: string;\n\n     /**\n      *  The transaction data.\n      */\n     data?: string;\n\n     /**\n      *  The chain ID the transaction is valid on.\n      */\n     chainId?: string;\n\n     /**\n      *  The [[link-eip-2718]] transaction type.\n      */\n     type?: string;\n\n     /**\n      *  The maximum amount of gas to allow a transaction to consume.\n      *\n      *  In most other places in ethers, this is called ``gasLimit`` which\n      *  differs from the JSON-RPC Ethereum API specification.\n      */\n     gas?: string;\n\n     /**\n      *  The gas price per wei for transactions prior to [[link-eip-1559]].\n      */\n     gasPrice?: string;\n\n     /**\n      *  The maximum fee per gas for [[link-eip-1559]] transactions.\n      */\n     maxFeePerGas?: string;\n\n     /**\n      *  The maximum priority fee per gas for [[link-eip-1559]] transactions.\n      */\n     maxPriorityFeePerGas?: string;\n\n     /**\n      *  The nonce for the transaction.\n      */\n     nonce?: string;\n\n     /**\n      *  The transaction value (in wei).\n      */\n     value?: string;\n\n     /**\n      *  The transaction access list.\n      */\n     accessList?: Array<{ address: string, storageKeys: Array<string> }>;\n}\n\n// @TODO: Unchecked Signers\n\nexport class JsonRpcSigner extends AbstractSigner<JsonRpcApiProvider> {\n    address!: string;\n\n    constructor(provider: JsonRpcApiProvider, address: string) {\n        super(provider);\n        address = getAddress(address);\n        defineProperties<JsonRpcSigner>(this, { address });\n    }\n\n    connect(provider: null | Provider): Signer {\n        assert(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.connect\"\n        });\n    }\n\n    async getAddress(): Promise<string> {\n        return this.address;\n    }\n\n    // JSON-RPC will automatially fill in nonce, etc. so we just check from\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        return await this.populateCall(tx);\n    }\n\n    // Returns just the hash of the transaction after sent, which is what\n    // the bare JSON-RPC API does;\n    async sendUncheckedTransaction(_tx: TransactionRequest): Promise<string> {\n        const tx = deepCopy(_tx);\n\n        const promises: Array<Promise<void>> = [];\n\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const _from = tx.from;\n            promises.push((async () => {\n                const from = await resolveAddress(_from, this.provider);\n                assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(),\n                    \"from address mismatch\", \"transaction\", _tx);\n                tx.from = from;\n            })());\n        } else {\n            tx.from = this.address;\n        }\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (tx.gasLimit == null) {\n            promises.push((async () => {\n                tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address});\n            })());\n        }\n\n        // The address may be an ENS name or Addressable\n        if (tx.to != null) {\n            const _to = tx.to;\n            promises.push((async () => {\n                tx.to = await resolveAddress(_to, this.provider);\n            })());\n        }\n\n        // Wait until all of our properties are filled in\n        if (promises.length) { await Promise.all(promises); }\n\n        const hexTx = this.provider.getRpcTransaction(tx);\n\n        return this.provider.send(\"eth_sendTransaction\", [ hexTx ]);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider.getBlockNumber();\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(tx);\n\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return await (new Promise((resolve, reject) => {\n            const timeouts = [ 1000, 100 ];\n            const checkTx = async () => {\n                // Try getting the transaction\n                const tx = await this.provider.getTransaction(hash);\n                if (tx != null) {\n                    resolve(tx.replaceableTransaction(blockNumber));\n                    return;\n                }\n\n                // Wait another 4 seconds\n                this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);\n            };\n            checkTx();\n        }));\n    }\n\n    async signTransaction(_tx: TransactionRequest): Promise<string> {\n        const tx = deepCopy(_tx);\n\n        // Make sure the from matches the sender\n        if (tx.from) {\n            const from = await resolveAddress(tx.from, this.provider);\n            assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(),\n                \"from address mismatch\", \"transaction\", _tx);\n            tx.from = from;\n        } else {\n            tx.from = this.address;\n        }\n\n        const hexTx = this.provider.getRpcTransaction(tx);\n        return await this.provider.send(\"eth_signTransaction\", [ hexTx ]);\n    }\n\n\n    async signMessage(_message: string | Uint8Array): Promise<string> {\n        const message = ((typeof(_message) === \"string\") ? toUtf8Bytes(_message): _message);\n        return await this.provider.send(\"personal_sign\", [\n            hexlify(message), this.address.toLowerCase() ]);\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, _value: Record<string, any>): Promise<string> {\n        const value = deepCopy(_value);\n\n        // Populate any ENS names (in-place)\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value: string) => {\n            const address = await resolveAddress(value);\n            assertArgument(address != null, \"TypedData does not support null address\", \"value\", value);\n            return address;\n        });\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            this.address.toLowerCase(),\n            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        return this.provider.send(\"personal_unlockAccount\", [\n            this.address.toLowerCase(), password, null ]);\n    }\n\n    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n    async _legacySignMessage(_message: string | Uint8Array): Promise<string> {\n        const message = ((typeof(_message) === \"string\") ? toUtf8Bytes(_message): _message);\n        return await this.provider.send(\"eth_sign\", [\n            this.address.toLowerCase(), hexlify(message) ]);\n    }\n}\n\ntype ResolveFunc = (result: JsonRpcResult) => void;\ntype RejectFunc = (error: Error) => void;\n\ntype Payload = { payload: JsonRpcPayload, resolve: ResolveFunc, reject: RejectFunc };\n\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nexport abstract class JsonRpcApiProvider extends AbstractProvider {\n\n    #options: Required<JsonRpcApiProviderOptions>;\n\n    // The next ID to use for the JSON-RPC ID field\n    #nextId: number;\n\n    // Payloads are queued and triggered in batches using the drainTimer\n    #payloads: Array<Payload>;\n    #drainTimer: null | Timer;\n\n    #notReady: null | {\n        promise: Promise<void>,\n        resolve: null | ((v: void) => void)\n    };\n\n    #network: null | Network;\n\n    #scheduleDrain(): void {\n        if (this.#drainTimer) { return; }\n\n        // If we aren't using batching, no hard in sending it immeidately\n        const stallTime = (this._getOption(\"batchMaxCount\") === 1) ? 0: this._getOption(\"batchStallTime\");\n\n        this.#drainTimer = setTimeout(() => {\n            this.#drainTimer = null;\n\n            const payloads = this.#payloads;\n            this.#payloads = [ ];\n\n            while (payloads.length) {\n\n                // Create payload batches that satisfy our batch constraints\n                const batch = [ <Payload>(payloads.shift()) ];\n                while (payloads.length) {\n                    if (batch.length === this.#options.batchMaxCount) { break; }\n                    batch.push(<Payload>(payloads.shift()));\n                    const bytes = JSON.stringify(batch.map((p) => p.payload));\n                    if (bytes.length > this.#options.batchMaxSize) {\n                        payloads.unshift(<Payload>(batch.pop()));\n                        break;\n                    }\n                }\n\n                // Process the result to each payload\n                (async () => {\n                    const payload = ((batch.length === 1) ? batch[0].payload: batch.map((p) => p.payload));\n\n                    this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n\n                    try {\n                        const result = await this._send(payload);\n                        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n\n                        // Process results in batch order\n                        for (const { resolve, reject, payload } of batch) {\n\n                            if (this.destroyed) {\n                                reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n                                continue;\n                            }\n\n                            // Find the matching result\n                            const resp = result.filter((r) => (r.id === payload.id))[0];\n\n                            // No result; the node failed us in unexpected ways\n                            if (resp == null) {\n                                const error = makeError(\"missing response for request\", \"BAD_DATA\", {\n                                    value: result, info: { payload }\n                                });\n                                this.emit(\"error\", error);\n                                reject(error);\n                                continue;\n                            }\n\n                            // The response is an error\n                            if (\"error\" in resp) {\n                                reject(this.getRpcError(payload, resp));\n                                continue;\n                            }\n\n                            // All good; send the result\n                            resolve(resp.result);\n                        }\n\n                    } catch (error: any) {\n                        this.emit(\"debug\", { action: \"receiveRpcError\", error });\n\n                        for (const { reject } of batch) {\n                            // @TODO: augment the error with the payload\n                            reject(error);\n                        }\n                    }\n                })();\n            }\n        }, stallTime);\n    }\n\n    constructor(network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n\n        this.#nextId = 1;\n        this.#options = Object.assign({ }, defaultOptions, options || { });\n\n        this.#payloads = [ ];\n        this.#drainTimer = null;\n\n        this.#network = null;\n\n        {\n            let resolve: null | ((value: void) => void) = null;\n            const promise = new Promise((_resolve: (value: void) => void) => {\n                resolve = _resolve;\n            });\n            this.#notReady = { promise, resolve };\n        }\n\n        // Make sure any static network is compatbile with the provided netwrok\n        const staticNetwork = this._getOption(\"staticNetwork\");\n        if (staticNetwork) {\n            assertArgument(network == null || staticNetwork.matches(network),\n                \"staticNetwork MUST match network object\", \"options\", options);\n            this.#network = staticNetwork;\n        }\n    }\n\n    /**\n     *  Returns the value associated with the option %%key%%.\n     *\n     *  Sub-classes can use this to inquire about configuration options.\n     */\n    _getOption<K extends keyof JsonRpcApiProviderOptions>(key: K): JsonRpcApiProviderOptions[K] {\n        return this.#options[key];\n    }\n\n    /**\n     *  Gets the [[Network]] this provider has committed to. On each call, the network\n     *  is detected, and if it has changed, the call will reject.\n     */\n    get _network(): Network {\n        assert (this.#network, \"network is not available yet\", \"NETWORK_ERROR\");\n        return this.#network;\n    }\n\n    /**\n     *  Sends a JSON-RPC %%payload%% (or a batch) to the underlying channel.\n     *\n     *  Sub-classes **MUST** override this.\n     */\n    abstract _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult | JsonRpcError>>;\n\n\n    /**\n     *  Resolves to the non-normalized value by performing %%req%%.\n     *\n     *  Sub-classes may override this to modify behavior of actions,\n     *  and should generally call ``super._perform`` as a fallback.\n     */\n    async _perform(req: PerformActionRequest): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (req.method === \"call\" || req.method === \"estimateGas\") {\n            let tx = req.transaction;\n            if (tx && tx.type != null && getBigInt(tx.type)) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        req = Object.assign({ }, req, {\n                            transaction: Object.assign({ }, tx, { type: undefined })\n                        });\n                    }\n                }\n            }\n        }\n\n        const request = this.getRpcRequest(req);\n\n        if (request != null) {\n            return await this.send(request.method, request.args);\n        }\n\n        return super._perform(req);\n    }\n\n    /**\n     *  Sub-classes may override this; it detects the *actual* network that\n     *  we are **currently** connected to.\n     *\n     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n     *  _send primitive must be used instead.\n     */\n    async _detectNetwork(): Promise<Network> {\n        const network = this._getOption(\"staticNetwork\");\n        if (network) { return network; }\n\n        // If we are ready, use ``send``, which enabled requests to be batched\n        if (this.ready) {\n            return Network.from(getBigInt(await this.send(\"eth_chainId\", [ ])));\n        }\n\n        // We are not ready yet; use the primitive _send\n\n        const payload: JsonRpcPayload = {\n            id: this.#nextId++, method: \"eth_chainId\", params: [ ], jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", { action: \"sendRpcPayload\", payload });\n\n        let result: JsonRpcResult | JsonRpcError;\n        try {\n            result = (await this._send(payload))[0];\n        } catch (error) {\n            this.emit(\"debug\", { action: \"receiveRpcError\", error });\n            throw error;\n        }\n\n        this.emit(\"debug\", { action: \"receiveRpcResult\", result });\n\n        if (\"result\" in result) {\n            return Network.from(getBigInt(result.result));\n        }\n\n        throw this.getRpcError(payload, result);\n    }\n\n    /**\n     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n     *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n     *  ``super._start()`` **MUST** be called.\n     *\n     *  Calling it multiple times is safe and has no effect.\n     */\n    _start(): void {\n        if (this.#notReady == null || this.#notReady.resolve == null) { return; }\n\n        this.#notReady.resolve();\n        this.#notReady = null;\n\n        (async () => {\n\n            // Bootstrap the network\n            while (this.#network == null && !this.destroyed) {\n                try {\n                    this.#network = await this._detectNetwork();\n                } catch (error) {\n                    console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n                    this.emit(\"error\", makeError(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", { event: \"initial-network-discovery\", info: { error } }));\n                    await stall(1000);\n                }\n            }\n\n            // Start dispatching requests\n            this.#scheduleDrain();\n        })();\n    }\n\n    /**\n     *  Resolves once the [[_start]] has been called. This can be used in\n     *  sub-classes to defer sending data until the connection has been\n     *  established.\n     */\n    async _waitUntilReady(): Promise<void> {\n        if (this.#notReady == null) { return; }\n        return await this.#notReady.promise;\n    }\n\n\n    /**\n     *  Return a Subscriber that will manage the %%sub%%.\n     *\n     *  Sub-classes may override this to modify the behavior of\n     *  subscription management.\n     */\n    _getSubscriber(sub: Subscription): Subscriber {\n\n        // Pending Filters aren't availble via polling\n        if (sub.type === \"pending\") { return new FilterIdPendingSubscriber(this); }\n\n        if (sub.type === \"event\") {\n            if (this._getOption(\"polling\")) {\n                return new PollingEventSubscriber(this, sub.filter);\n            }\n            return new FilterIdEventSubscriber(this, sub.filter);\n        }\n\n        // Orphaned Logs are handled automatically, by the filter, since\n        // logs with removed are emitted by it\n        if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n            return new UnmanagedSubscriber(\"orphan\");\n        }\n\n        return super._getSubscriber(sub);\n    }\n\n    /**\n     *  Returns true only if the [[_start]] has been called.\n     */\n    get ready(): boolean { return this.#notReady == null; }\n\n    /**\n     *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n     *  which has all values hexlified and any numeric values converted\n     *  to Quantity values.\n     */\n    getRpcTransaction(tx: TransactionRequest): JsonRpcTransactionRequest {\n        const result: JsonRpcTransactionRequest = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            let dstKey = key;\n            if (key === \"gasLimit\") { dstKey = \"gas\"; }\n            (<any>result)[dstKey] = toQuantity(getBigInt((<any>tx)[key], `tx.${ key }`));\n        });\n\n        // Make sure addresses and data are lowercase\n        [\"from\", \"to\", \"data\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            (<any>result)[key] = hexlify((<any>tx)[key]);\n        });\n\n        // Normalize the access list object\n        if (tx.accessList) {\n            result[\"accessList\"] = accessListify(tx.accessList);\n        }\n\n        return result;\n    }\n\n    /**\n     *  Returns the request method and arguments required to perform\n     *  %%req%%.\n     */\n    getRpcRequest(req: PerformActionRequest): null | { method: string, args: Array<any> } {\n        switch (req.method) {\n            case \"chainId\":\n                return { method: \"eth_chainId\", args: [ ] };\n\n            case \"getBlockNumber\":\n                return { method: \"eth_blockNumber\", args: [ ] };\n\n            case \"getGasPrice\":\n                return { method: \"eth_gasPrice\", args: [] };\n\n            case \"getBalance\":\n                return {\n                    method: \"eth_getBalance\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getTransactionCount\":\n                return {\n                    method: \"eth_getTransactionCount\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getCode\":\n                return {\n                    method: \"eth_getCode\",\n                    args: [ getLowerCase(req.address), req.blockTag ]\n                };\n\n            case \"getStorage\":\n                return {\n                    method: \"eth_getStorageAt\",\n                    args: [\n                        getLowerCase(req.address),\n                        (\"0x\" + req.position.toString(16)),\n                        req.blockTag\n                    ]\n                };\n\n            case \"broadcastTransaction\":\n                return {\n                    method: \"eth_sendRawTransaction\",\n                    args: [ req.signedTransaction ]\n                };\n\n            case \"getBlock\":\n                if (\"blockTag\" in req) {\n                    return {\n                        method: \"eth_getBlockByNumber\",\n                        args: [ req.blockTag, !!req.includeTransactions ]\n                    };\n                } else if (\"blockHash\" in req) {\n                    return {\n                        method: \"eth_getBlockByHash\",\n                        args: [ req.blockHash, !!req.includeTransactions ]\n                    };\n                }\n                break;\n\n            case \"getTransaction\":\n                return {\n                    method: \"eth_getTransactionByHash\",\n                    args: [ req.hash ]\n                };\n\n            case \"getTransactionReceipt\":\n                return {\n                    method: \"eth_getTransactionReceipt\",\n                    args: [ req.hash ]\n                };\n\n            case \"call\":\n                return {\n                    method: \"eth_call\",\n                    args: [ this.getRpcTransaction(req.transaction), req.blockTag ]\n                };\n\n            case \"estimateGas\": {\n                return {\n                    method: \"eth_estimateGas\",\n                    args: [ this.getRpcTransaction(req.transaction) ]\n                };\n            }\n\n            case \"getLogs\":\n                if (req.filter && req.filter.address != null) {\n                    if (Array.isArray(req.filter.address)) {\n                        req.filter.address = req.filter.address.map(getLowerCase);\n                    } else {\n                        req.filter.address = getLowerCase(req.filter.address);\n                    }\n                }\n                return { method: \"eth_getLogs\", args: [ req.filter ] };\n        }\n\n        return null;\n    }\n\n    /**\n     *  Returns an ethers-style Error for the given JSON-RPC error\n     *  %%payload%%, coalescing the various strings and error shapes\n     *  that different nodes return, coercing them into a machine-readable\n     *  standardized error.\n     */\n    getRpcError(payload: JsonRpcPayload, _error: JsonRpcError): Error {\n        const { method } = payload;\n        const { error } = _error;\n\n        if (method === \"eth_estimateGas\" && error.message) {\n            const msg = error.message;\n            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n                return makeError(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n                    transaction: ((<any>payload).params[0]),\n                    info: { payload, error }\n                });\n            }\n        }\n\n        if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n            const result = spelunkData(error);\n\n            const e = AbiCoder.getBuiltinCallException(\n                (method === \"eth_call\") ? \"call\": \"estimateGas\",\n                ((<any>payload).params[0]),\n                (result ? result.data: null)\n            );\n            e.info = { error, payload };\n            return e;\n        }\n\n        // Only estimateGas and call can return arbitrary contract-defined text, so now we\n        // we can process text safely.\n\n        const message = JSON.stringify(spelunkMessage(error));\n\n        if (typeof(error.message) === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n            const actionMap: Record<string, \"requestAccess\" | \"sendTransaction\" | \"signMessage\" | \"signTransaction\" | \"signTypedData\"> = {\n                eth_sign: \"signMessage\",\n                personal_sign: \"signMessage\",\n                eth_signTypedData_v4: \"signTypedData\",\n                eth_signTransaction: \"signTransaction\",\n                eth_sendTransaction: \"sendTransaction\",\n                eth_requestAccounts: \"requestAccess\",\n                wallet_requestAccounts: \"requestAccess\",\n            };\n\n            return makeError(`user rejected action`, \"ACTION_REJECTED\", {\n                action: (actionMap[method] || \"unknown\") ,\n                reason: \"rejected\",\n                info: { payload, error }\n            });\n        }\n\n        if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n            const transaction = <TransactionLike<string>>((<any>payload).params[0]);\n\n            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n                return makeError(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n                    transaction, info: { error }\n                });\n            }\n\n            if (message.match(/nonce/i) && message.match(/too low/i)) {\n                return makeError(\"nonce has already been used\", \"NONCE_EXPIRED\", { transaction, info: { error } });\n            }\n\n            // \"replacement transaction underpriced\"\n            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n                return makeError(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", { transaction, info: { error } });\n            }\n\n            if (message.match(/only replay-protected/i)) {\n                return makeError(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n                    operation: method, info: { transaction, info: { error } }\n                });\n            }\n        }\n\n        let unsupported = !!message.match(/the method .* does not exist/i);\n        if (!unsupported) {\n            if (error && (<any>error).details && (<any>error).details.startsWith(\"Unauthorized method:\")) {\n                unsupported = true;\n            }\n        }\n\n        if (unsupported) {\n            return makeError(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method, info: { error, payload }\n            });\n        }\n\n        return makeError(\"could not coalesce error\", \"UNKNOWN_ERROR\", { error, payload });\n    }\n\n\n    /**\n     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n     *  over the underlying channel. This can be used to call methods\n     *  on the backend that do not have a high-level API within the Provider\n     *  API.\n     *\n     *  This method queues requests according to the batch constraints\n     *  in the options, assigns the request a unique ID.\n     *\n     *  **Do NOT override** this method in sub-classes; instead\n     *  override [[_send]] or force the options values in the\n     *  call to the constructor to modify this method's behavior.\n     */\n    send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        // @TODO: cache chainId?? purge on switch_networks\n\n        // We have been destroyed; no operations are supported anymore\n        if (this.destroyed) {\n            return Promise.reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: method }));\n        }\n\n        const id = this.#nextId++;\n        const promise = new Promise((resolve, reject) => {\n            this.#payloads.push({\n                resolve, reject,\n                payload: { method, params, id, jsonrpc: \"2.0\" }\n            });\n        });\n\n        // If there is not a pending drainTimer, set one\n        this.#scheduleDrain();\n\n        return <Promise<JsonRpcResult>>promise;\n    }\n\n    /**\n     *  Resolves to the [[Signer]] account for  %%address%% managed by\n     *  the client.\n     *\n     *  If the %%address%% is a number, it is used as an index in the\n     *  the accounts from [[listAccounts]].\n     *\n     *  This can only be used on clients which manage accounts (such as\n     *  Geth with imported account or MetaMask).\n     *\n     *  Throws if the account doesn't exist.\n     */\n    async getSigner(address?: number | string): Promise<JsonRpcSigner> {\n        if (address == null) { address = 0; }\n\n        const accountsPromise = this.send(\"eth_accounts\", [ ]);\n\n        // Account index\n        if (typeof(address) === \"number\") {\n            const accounts = <Array<string>>(await accountsPromise);\n            if (address >= accounts.length) { throw new Error(\"no such account\"); }\n            return new JsonRpcSigner(this, accounts[address]);\n        }\n\n        const { accounts } = await resolveProperties({\n            network: this.getNetwork(),\n            accounts: accountsPromise\n        });\n\n        // Account address\n        address = getAddress(address);\n        for (const account of accounts) {\n            if (getAddress(account) === address) {\n                return new JsonRpcSigner(this, address);\n            }\n        }\n\n        throw new Error(\"invalid account\");\n    }\n\n    async listAccounts(): Promise<Array<JsonRpcSigner>> {\n        const accounts: Array<string> = await this.send(\"eth_accounts\", [ ]);\n        return accounts.map((a) => new JsonRpcSigner(this, a));\n    }\n\n    destroy(): void {\n\n        // Stop processing requests\n        if (this.#drainTimer) {\n            clearTimeout(this.#drainTimer);\n            this.#drainTimer = null;\n        }\n\n        // Cancel all pending requests\n        for (const { payload, reject } of this.#payloads) {\n            reject(makeError(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", { operation: payload.method }));\n        }\n\n        this.#payloads = [ ];\n\n        // Parent clean-up\n        super.destroy();\n\n    }\n}\n\n// @TODO: remove this in v7, it is not exported because this functionality\n// is exposed in the JsonRpcApiProvider by setting polling to true. It should\n// be safe to remove regardless, because it isn't reachable, but just in case.\n/**\n *  @_ignore:\n */\nexport abstract class JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n    #pollingInterval: number;\n    constructor(network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        super(network, options);\n\n        this.#pollingInterval = 4000;\n    }\n\n    _getSubscriber(sub: Subscription): Subscriber {\n        const subscriber = super._getSubscriber(sub);\n        if (isPollable(subscriber)) {\n            subscriber.pollingInterval = this.#pollingInterval;\n        }\n        return subscriber;\n    }\n\n    /**\n     *  The polling interval (default: 4000 ms)\n     */\n    get pollingInterval(): number { return this.#pollingInterval; }\n    set pollingInterval(value: number) {\n        if (!Number.isInteger(value) || value < 0) { throw new Error(\"invalid interval\"); }\n        this.#pollingInterval = value;\n        this._forEachSubscriber((sub) => {\n            if (isPollable(sub)) {\n                sub.pollingInterval = this.#pollingInterval;\n            }\n        });\n    }\n}\n\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nexport class JsonRpcProvider extends JsonRpcApiPollingProvider {\n    #connect: FetchRequest;\n\n    constructor(url?: string | FetchRequest, network?: Networkish, options?: JsonRpcApiProviderOptions) {\n        if (url == null) { url = \"http:/\\/localhost:8545\"; }\n        super(network, options);\n\n        if (typeof(url) === \"string\") {\n            this.#connect = new FetchRequest(url);\n        } else {\n            this.#connect = url.clone();\n        }\n    }\n\n    _getConnection(): FetchRequest {\n        return this.#connect.clone();\n    }\n\n    async send(method: string, params: Array<any> | Record<string, any>): Promise<any> {\n        // All requests are over HTTP, so we can just start handling requests\n        // We do this here rather than the constructor so that we don't send any\n        // requests to the network (i.e. eth_chainId) until we absolutely have to.\n        await this._start();\n\n        return await super.send(method, params);\n    }\n\n    async _send(payload: JsonRpcPayload | Array<JsonRpcPayload>): Promise<Array<JsonRpcResult>> {\n        // Configure a POST connection for the requested method\n        const request = this._getConnection();\n        request.body = JSON.stringify(payload);\n        request.setHeader(\"content-type\", \"application/json\");\n\n        const response = await request.send();\n        response.assertOk();\n\n        let resp = response.bodyJson;\n        if (!Array.isArray(resp)) { resp = [ resp ]; }\n\n        return resp;\n    }\n}\n\nfunction spelunkData(value: any): null | { message: string, data: string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(/revert/i) && isHexString(value.data)) {\n        return { message: value.message, data: value.data };\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunkData(value[key]);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunkData(JSON.parse(value));\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction _spelunkMessage(value: any, result: Array<string>): void {\n    if (value == null) { return; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\") {\n        result.push(value.message);\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            _spelunkMessage(value[key], result);\n        }\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return _spelunkMessage(JSON.parse(value), result);\n        } catch (error) { }\n    }\n}\n\nfunction spelunkMessage(value: any): Array<string> {\n    const result: Array<string> = [ ];\n    _spelunkMessage(value, result);\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}