{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PocketProvider = void 0;\n/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.gateway.pokt.network\";\n    case \"goerli\":\n      return \"eth-goerli.gateway.pokt.network\";\n    case \"matic\":\n      return \"poly-mainnet.gateway.pokt.network\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai-rpc.gateway.pokt.network\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nclass PocketProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  /**\n   *  The Application ID for the Pocket connection.\n   */\n  applicationId;\n  /**\n   *  The Application Secret for making authenticated requests\n   *  to the Pocket connection.\n   */\n  applicationSecret;\n  /**\n   *  Create a new **PocketProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  constructor(_network, applicationId, applicationSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    if (applicationSecret == null) {\n      applicationSecret = null;\n    }\n    const options = {\n      staticNetwork: network\n    };\n    const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n    super(request, network, options);\n    (0, index_js_1.defineProperties)(this, {\n      applicationId,\n      applicationSecret\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%% with\n   *  %%applicationId%%.\n   */\n  static getRequest(network, applicationId, applicationSecret) {\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v1/lb/${applicationId}`);\n    request.allowGzip = true;\n    if (applicationSecret) {\n      request.setCredentials(\"\", applicationSecret);\n    }\n    if (applicationId === defaultApplicationId) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"PocketProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n}\nexports.PocketProvider = PocketProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","defaultApplicationId","getHost","name","assertArgument","PocketProvider","JsonRpcProvider","applicationId","applicationSecret","constructor","_network","network","Network","from","options","staticNetwork","request","getRequest","defineProperties","_getProvider","chainId","error","FetchRequest","allowGzip","setCredentials","retryFunc","response","attempt","showThrottleMessage","isCommunityResource","exports"],"sources":["/home/nikola/Desktop/Kriptografija projekat Nikola Ivanovic 637-2019/friendship-dapp/node_modules/ethers/src.ts/providers/provider-pocket.ts"],"sourcesContent":["/**\n *  [[link-pocket]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\n\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return  \"eth-mainnet.gateway.pokt.network\";\n        case \"goerli\":\n            return \"eth-goerli.gateway.pokt.network\";\n\n        case \"matic\":\n            return \"poly-mainnet.gateway.pokt.network\";\n        case \"matic-mumbai\":\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **PocketProvider** connects to the [[link-pocket]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-pocket-signup).\n */\nexport class PocketProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The Application ID for the Pocket connection.\n     */\n    readonly applicationId!: string;\n\n    /**\n     *  The Application Secret for making authenticated requests\n     *  to the Pocket connection.\n     */\n    readonly applicationSecret!: null | string;\n\n    /**\n     *  Create a new **PocketProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, applicationId?: null | string, applicationSecret?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n        if (applicationSecret == null) { applicationSecret = null; }\n\n        const options = { staticNetwork: network };\n\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n        super(request, network, options);\n\n        defineProperties<PocketProvider>(this, { applicationId, applicationSecret });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%applicationId%%.\n     */\n    static getRequest(network: Network, applicationId?: null | string, applicationSecret?: null | string): FetchRequest {\n        if (applicationId == null) { applicationId = defaultApplicationId; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v1/lb/${ applicationId }`);\n        request.allowGzip = true;\n\n        if (applicationSecret) {\n            request.setCredentials(\"\", applicationSecret);\n        }\n\n        if (applicationId === defaultApplicationId) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"PocketProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationId);\n    }\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;AAaA,MAAAA,UAAA,GAAAC,OAAA;AAKA,MAAAC,cAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,qBAAA,GAAAH,OAAA;AAKA,MAAMI,oBAAoB,GAAG,0BAA0B;AAEvD,SAASC,OAAOA,CAACC,IAAY;EACzB,QAAQA,IAAI;IACR,KAAK,SAAS;MACV,OAAQ,kCAAkC;IAC9C,KAAK,QAAQ;MACT,OAAO,iCAAiC;IAE5C,KAAK,OAAO;MACR,OAAO,mCAAmC;IAC9C,KAAK,cAAc;MACf,OAAO,yCAAyC;;EAGxD,IAAAP,UAAA,CAAAQ,cAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAED,IAAI,CAAC;AACjE;AAGA;;;;;;;;;AASA,MAAaE,cAAe,SAAQL,qBAAA,CAAAM,eAAe;EAE/C;;;EAGSC,aAAa;EAEtB;;;;EAISC,iBAAiB;EAE1B;;;;;;EAMAC,YAAYC,QAAqB,EAAEH,aAA6B,EAAEC,iBAAiC;IAC/F,IAAIE,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,MAAMC,OAAO,GAAGZ,YAAA,CAAAa,OAAO,CAACC,IAAI,CAACH,QAAQ,CAAC;IACtC,IAAIH,aAAa,IAAI,IAAI,EAAE;MAAEA,aAAa,GAAGN,oBAAoB;;IACjE,IAAIO,iBAAiB,IAAI,IAAI,EAAE;MAAEA,iBAAiB,GAAG,IAAI;;IAEzD,MAAMM,OAAO,GAAG;MAAEC,aAAa,EAAEJ;IAAO,CAAE;IAE1C,MAAMK,OAAO,GAAGX,cAAc,CAACY,UAAU,CAACN,OAAO,EAAEJ,aAAa,EAAEC,iBAAiB,CAAC;IACpF,KAAK,CAACQ,OAAO,EAAEL,OAAO,EAAEG,OAAO,CAAC;IAEhC,IAAAlB,UAAA,CAAAsB,gBAAgB,EAAiB,IAAI,EAAE;MAAEX,aAAa;MAAEC;IAAiB,CAAE,CAAC;EAChF;EAEAW,YAAYA,CAACC,OAAe;IACxB,IAAI;MACA,OAAO,IAAIf,cAAc,CAACe,OAAO,EAAE,IAAI,CAACb,aAAa,EAAE,IAAI,CAACC,iBAAiB,CAAC;KACjF,CAAC,OAAOa,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,YAAY,CAACC,OAAO,CAAC;EACtC;EAEA;;;;EAIA,OAAOH,UAAUA,CAACN,OAAgB,EAAEJ,aAA6B,EAAEC,iBAAiC;IAChG,IAAID,aAAa,IAAI,IAAI,EAAE;MAAEA,aAAa,GAAGN,oBAAoB;;IAEjE,MAAMe,OAAO,GAAG,IAAIpB,UAAA,CAAA0B,YAAY,CAAC,YAAapB,OAAO,CAACS,OAAO,CAACR,IAAI,CAAE,UAAWI,aAAc,EAAE,CAAC;IAChGS,OAAO,CAACO,SAAS,GAAG,IAAI;IAExB,IAAIf,iBAAiB,EAAE;MACnBQ,OAAO,CAACQ,cAAc,CAAC,EAAE,EAAEhB,iBAAiB,CAAC;;IAGjD,IAAID,aAAa,KAAKN,oBAAoB,EAAE;MACxCe,OAAO,CAACS,SAAS,GAAG,OAAOT,OAAO,EAAEU,QAAQ,EAAEC,OAAO,KAAI;QACrD,IAAA7B,cAAA,CAAA8B,mBAAmB,EAAC,gBAAgB,CAAC;QACrC,OAAO,IAAI;MACf,CAAC;;IAGL,OAAOZ,OAAO;EAClB;EAEAa,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACtB,aAAa,KAAKN,oBAAoB;EACvD;;AAlEJ6B,OAAA,CAAAzB,cAAA,GAAAA,cAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}