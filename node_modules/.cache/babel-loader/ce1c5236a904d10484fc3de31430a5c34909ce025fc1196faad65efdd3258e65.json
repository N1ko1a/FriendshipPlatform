{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mnemonic = void 0;\nconst index_js_1 = require(\"../crypto/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst lang_en_js_1 = require(\"../wordlists/lang-en.js\");\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits & 0xff;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1 & 0xff;\n}\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n  (0, index_js_2.assertNormalize)(\"NFKD\");\n  if (wordlist == null) {\n    wordlist = lang_en_js_1.LangEn.wordlist();\n  }\n  const words = wordlist.split(mnemonic);\n  (0, index_js_2.assertArgument)(words.length % 3 === 0 && words.length >= 12 && words.length <= 24, \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\n  const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\n  let offset = 0;\n  for (let i = 0; i < words.length; i++) {\n    let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n    (0, index_js_2.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, \"mnemonic\", \"[ REDACTED ]\");\n    for (let bit = 0; bit < 11; bit++) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n      offset++;\n    }\n  }\n  const entropyBits = 32 * words.length / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = (0, index_js_2.getBytes)((0, index_js_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n  (0, index_js_2.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\n  return (0, index_js_2.hexlify)(entropy.slice(0, entropyBits / 8));\n}\nfunction entropyToMnemonic(entropy, wordlist) {\n  (0, index_js_2.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\n  if (wordlist == null) {\n    wordlist = lang_en_js_1.LangEn.wordlist();\n  }\n  const indices = [0];\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i++) {\n    // Consume the whole byte (with still more to go)\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  }\n  // Compute the checksum bits\n  const checksumBits = entropy.length / 4;\n  const checksum = parseInt((0, index_js_1.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return wordlist.join(indices.map(index => wordlist.getWord(index)));\n}\nconst _guard = {};\n/**\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\n *  seeds and convert between phrases and entropy.\n */\nclass Mnemonic {\n  /**\n   *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.\n   *\n   *  Use the [[wordlist]] ``split`` method to get the individual words.\n   */\n  phrase;\n  /**\n   *  The password used for this mnemonic. If no password is used this\n   *  is the empty string (i.e. ``\"\"``) as per the specification.\n   */\n  password;\n  /**\n   *  The wordlist for this mnemonic.\n   */\n  wordlist;\n  /**\n   *  The underlying entropy which the mnemonic encodes.\n   */\n  entropy;\n  /**\n   *  @private\n   */\n  constructor(guard, entropy, phrase, password, wordlist) {\n    if (password == null) {\n      password = \"\";\n    }\n    if (wordlist == null) {\n      wordlist = lang_en_js_1.LangEn.wordlist();\n    }\n    (0, index_js_2.assertPrivate)(guard, _guard, \"Mnemonic\");\n    (0, index_js_2.defineProperties)(this, {\n      phrase,\n      password,\n      wordlist,\n      entropy\n    });\n  }\n  /**\n   *  Returns the seed for the mnemonic.\n   */\n  computeSeed() {\n    const salt = (0, index_js_2.toUtf8Bytes)(\"mnemonic\" + this.password, \"NFKD\");\n    return (0, index_js_1.pbkdf2)((0, index_js_2.toUtf8Bytes)(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\n  }\n  /**\n   *  Creates a new Mnemonic for the %%phrase%%.\n   *\n   *  The default %%password%% is the empty string and the default\n   *  wordlist is the [English wordlists](LangEn).\n   */\n  static fromPhrase(phrase, password, wordlist) {\n    // Normalize the case and space; throws if invalid\n    const entropy = mnemonicToEntropy(phrase, wordlist);\n    phrase = entropyToMnemonic((0, index_js_2.getBytes)(entropy), wordlist);\n    return new Mnemonic(_guard, entropy, phrase, password, wordlist);\n  }\n  /**\n   *  Create a new **Mnemonic** from the %%entropy%%.\n   *\n   *  The default %%password%% is the empty string and the default\n   *  wordlist is the [English wordlists](LangEn).\n   */\n  static fromEntropy(_entropy, password, wordlist) {\n    const entropy = (0, index_js_2.getBytes)(_entropy, \"entropy\");\n    const phrase = entropyToMnemonic(entropy, wordlist);\n    return new Mnemonic(_guard, (0, index_js_2.hexlify)(entropy), phrase, password, wordlist);\n  }\n  /**\n   *  Returns the phrase for %%mnemonic%%.\n   */\n  static entropyToPhrase(_entropy, wordlist) {\n    const entropy = (0, index_js_2.getBytes)(_entropy, \"entropy\");\n    return entropyToMnemonic(entropy, wordlist);\n  }\n  /**\n   *  Returns the entropy for %%phrase%%.\n   */\n  static phraseToEntropy(phrase, wordlist) {\n    return mnemonicToEntropy(phrase, wordlist);\n  }\n  /**\n   *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\n   *\n   *  This checks all the provided words belong to the %%wordlist%%,\n   *  that the length is valid and the checksum is correct.\n   */\n  static isValidMnemonic(phrase, wordlist) {\n    try {\n      mnemonicToEntropy(phrase, wordlist);\n      return true;\n    } catch (error) {}\n    return false;\n  }\n}\nexports.Mnemonic = Mnemonic;","map":{"version":3,"names":["index_js_1","require","index_js_2","lang_en_js_1","getUpperMask","bits","getLowerMask","mnemonicToEntropy","mnemonic","wordlist","assertNormalize","LangEn","words","split","assertArgument","length","entropy","Uint8Array","Math","ceil","offset","i","index","getWordIndex","normalize","bit","entropyBits","checksumBits","checksumMask","checksum","getBytes","sha256","slice","hexlify","entropyToMnemonic","indices","remainingBits","push","parseInt","substring","join","map","getWord","_guard","Mnemonic","phrase","password","constructor","guard","assertPrivate","defineProperties","computeSeed","salt","toUtf8Bytes","pbkdf2","fromPhrase","fromEntropy","_entropy","entropyToPhrase","phraseToEntropy","isValidMnemonic","error","exports"],"sources":["/home/nikola/Desktop/Projekat/friendship-dapp/node_modules/ethers/src.ts/wallet/mnemonic.ts"],"sourcesContent":["import { pbkdf2, sha256 } from \"../crypto/index.js\";\nimport {\n    defineProperties, getBytes, hexlify, assertNormalize, assertPrivate, assertArgument, toUtf8Bytes\n} from \"../utils/index.js\";\nimport { LangEn } from \"../wordlists/lang-en.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\nimport type { Wordlist } from \"../wordlists/index.js\";\n\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n   return ((1 << bits) - 1) << (8 - bits) & 0xff;\n}\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n   return ((1 << bits) - 1) & 0xff;\n}\n\n\nfunction mnemonicToEntropy(mnemonic: string, wordlist?: null | Wordlist): string {\n    assertNormalize(\"NFKD\");\n\n    if (wordlist == null) { wordlist = LangEn.wordlist(); }\n\n    const words = wordlist.split(mnemonic);\n    assertArgument((words.length % 3) === 0 && words.length >= 12 && words.length <= 24,\n        \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\n\n    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\n\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        assertArgument(index >= 0, `invalid mnemonic word at index ${ i }`, \"mnemonic\", \"[ REDACTED ]\");\n\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n\n    const entropyBits = 32 * words.length / 3;\n\n\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n\n    const checksum = getBytes(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n    assertArgument(checksum === (entropy[entropy.length - 1] & checksumMask),\n        \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\n\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\n\nfunction entropyToMnemonic(entropy: Uint8Array, wordlist?: null | Wordlist): string {\n\n    assertArgument((entropy.length % 4) === 0 && entropy.length >= 16 && entropy.length <= 32,\n        \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\n\n    if (wordlist == null) { wordlist = LangEn.wordlist(); }\n\n    const indices: Array<number> = [ 0 ];\n\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n\n            remainingBits -= 8;\n\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n            remainingBits += 3;\n        }\n    }\n\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = parseInt(sha256(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\n\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n\n    return wordlist.join(indices.map((index) => (<Wordlist>wordlist).getWord(index)));\n}\n\nconst _guard = { };\n\n/**\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\n *  seeds and convert between phrases and entropy.\n */\nexport class Mnemonic {\n    /**\n     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.\n     *\n     *  Use the [[wordlist]] ``split`` method to get the individual words.\n     */\n    readonly phrase!: string;\n\n    /**\n     *  The password used for this mnemonic. If no password is used this\n     *  is the empty string (i.e. ``\"\"``) as per the specification.\n     */\n    readonly password!: string;\n\n    /**\n     *  The wordlist for this mnemonic.\n     */\n    readonly wordlist!: Wordlist;\n\n    /**\n     *  The underlying entropy which the mnemonic encodes.\n     */\n    readonly entropy!: string;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, entropy: string, phrase: string, password?: null | string, wordlist?: null | Wordlist) {\n        if (password == null) { password = \"\"; }\n        if (wordlist == null) { wordlist = LangEn.wordlist(); }\n        assertPrivate(guard, _guard, \"Mnemonic\");\n        defineProperties<Mnemonic>(this, { phrase, password, wordlist, entropy });\n    }\n\n    /**\n     *  Returns the seed for the mnemonic.\n     */\n    computeSeed(): string {\n        const salt = toUtf8Bytes(\"mnemonic\" + this.password, \"NFKD\");\n        return pbkdf2(toUtf8Bytes(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\n    }\n\n    /**\n     *  Creates a new Mnemonic for the %%phrase%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */\n    static fromPhrase(phrase: string, password?: null | string, wordlist?: null | Wordlist): Mnemonic {\n        // Normalize the case and space; throws if invalid\n        const entropy = mnemonicToEntropy(phrase, wordlist);\n        phrase = entropyToMnemonic(getBytes(entropy), wordlist);\n        return new Mnemonic(_guard, entropy, phrase, password, wordlist);\n    }\n\n    /**\n     *  Create a new **Mnemonic** from the %%entropy%%.\n     *\n     *  The default %%password%% is the empty string and the default\n     *  wordlist is the [English wordlists](LangEn).\n     */\n    static fromEntropy(_entropy: BytesLike, password?: null | string, wordlist?: null | Wordlist): Mnemonic {\n        const entropy = getBytes(_entropy, \"entropy\");\n        const phrase = entropyToMnemonic(entropy, wordlist);\n        return new Mnemonic(_guard, hexlify(entropy), phrase, password, wordlist);\n    }\n\n    /**\n     *  Returns the phrase for %%mnemonic%%.\n     */\n    static entropyToPhrase(_entropy: BytesLike, wordlist?: null | Wordlist): string {\n        const entropy = getBytes(_entropy, \"entropy\");\n        return entropyToMnemonic(entropy, wordlist);\n    }\n\n    /**\n     *  Returns the entropy for %%phrase%%.\n     */\n    static phraseToEntropy(phrase: string, wordlist?: null | Wordlist): string {\n        return mnemonicToEntropy(phrase, wordlist);\n    }\n\n    /**\n     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\n     *\n     *  This checks all the provided words belong to the %%wordlist%%,\n     *  that the length is valid and the checksum is correct.\n     */\n    static isValidMnemonic(phrase: string, wordlist?: null | Wordlist): boolean {\n        try {\n            mnemonicToEntropy(phrase, wordlist);\n            return true;\n        } catch (error) { }\n        return false;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}