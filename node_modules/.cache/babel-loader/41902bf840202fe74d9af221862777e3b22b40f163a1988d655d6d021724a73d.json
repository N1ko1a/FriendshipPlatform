{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = void 0;\n/**\n *  Most interactions with Ethereum requires integer values, which use\n *  the smallest magnitude unit.\n *\n *  For example, imagine dealing with dollars and cents. Since dollars\n *  are divisible, non-integer values are possible, such as ``$10.77``.\n *  By using the smallest indivisible unit (i.e. cents), the value can\n *  be kept as the integer ``1077``.\n *\n *  When receiving decimal input from the user (as a decimal string),\n *  the value should be converted to an integer and when showing a user\n *  a value, the integer value should be converted to a decimal string.\n *\n *  This creates a clear distinction, between values to be used by code\n *  (integers) and values used for display logic to users (decimals).\n *\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\n *  where each individual unit is called a //wei//.\n *\n *  @_subsection api/utils:Unit Conversion  [about-units]\n */\nconst errors_js_1 = require(\"./errors.js\");\nconst fixednumber_js_1 = require(\"./fixednumber.js\");\nconst maths_js_1 = require(\"./maths.js\");\nconst names = [\"wei\", \"kwei\", \"mwei\", \"gwei\", \"szabo\", \"finney\", \"ether\"];\n/**\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\n *  places. The %%unit%% may be the number of decimal places or the name of\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n *\n */\nfunction formatUnits(value, unit) {\n  let decimals = 18;\n  if (typeof unit === \"string\") {\n    const index = names.indexOf(unit);\n    (0, errors_js_1.assertArgument)(index >= 0, \"invalid unit\", \"unit\", unit);\n    decimals = 3 * index;\n  } else if (unit != null) {\n    decimals = (0, maths_js_1.getNumber)(unit, \"unit\");\n  }\n  return fixednumber_js_1.FixedNumber.fromValue(value, decimals, {\n    decimals,\n    width: 512\n  }).toString();\n}\nexports.formatUnits = formatUnits;\n/**\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n */\nfunction parseUnits(value, unit) {\n  (0, errors_js_1.assertArgument)(typeof value === \"string\", \"value must be a string\", \"value\", value);\n  let decimals = 18;\n  if (typeof unit === \"string\") {\n    const index = names.indexOf(unit);\n    (0, errors_js_1.assertArgument)(index >= 0, \"invalid unit\", \"unit\", unit);\n    decimals = 3 * index;\n  } else if (unit != null) {\n    decimals = (0, maths_js_1.getNumber)(unit, \"unit\");\n  }\n  return fixednumber_js_1.FixedNumber.fromString(value, {\n    decimals,\n    width: 512\n  }).value;\n}\nexports.parseUnits = parseUnits;\n/**\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\n */\nfunction formatEther(wei) {\n  return formatUnits(wei, 18);\n}\nexports.formatEther = formatEther;\n/**\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\n *  decimal places.\n */\nfunction parseEther(ether) {\n  return parseUnits(ether, 18);\n}\nexports.parseEther = parseEther;","map":{"version":3,"names":["errors_js_1","require","fixednumber_js_1","maths_js_1","names","formatUnits","value","unit","decimals","index","indexOf","assertArgument","getNumber","FixedNumber","fromValue","width","toString","exports","parseUnits","fromString","formatEther","wei","parseEther","ether"],"sources":["/home/nikola/Nikola/GitHub/FriendshipPlatform/node_modules/ethers/src.ts/utils/units.ts"],"sourcesContent":["/**\n *  Most interactions with Ethereum requires integer values, which use\n *  the smallest magnitude unit.\n *\n *  For example, imagine dealing with dollars and cents. Since dollars\n *  are divisible, non-integer values are possible, such as ``$10.77``.\n *  By using the smallest indivisible unit (i.e. cents), the value can\n *  be kept as the integer ``1077``.\n *\n *  When receiving decimal input from the user (as a decimal string),\n *  the value should be converted to an integer and when showing a user\n *  a value, the integer value should be converted to a decimal string.\n *\n *  This creates a clear distinction, between values to be used by code\n *  (integers) and values used for display logic to users (decimals).\n *\n *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,\n *  where each individual unit is called a //wei//.\n *\n *  @_subsection api/utils:Unit Conversion  [about-units]\n */\nimport { assertArgument } from \"./errors.js\";\nimport { FixedNumber } from \"./fixednumber.js\";\nimport { getNumber } from \"./maths.js\";\n\nimport type { BigNumberish, Numeric } from \"../utils/index.js\";\n\n\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n\n/**\n *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal\n *  places. The %%unit%% may be the number of decimal places or the name of\n *  a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n *\n */\nexport function formatUnits(value: BigNumberish, unit?: string | Numeric): string {\n    let decimals = 18;\n    if (typeof(unit) === \"string\") {\n        const index = names.indexOf(unit);\n        assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    } else if (unit != null) {\n        decimals = getNumber(unit, \"unit\");\n    }\n\n    return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();\n}\n\n/**\n *  Converts the //decimal string// %%value%% to a BigInt, assuming\n *  %%unit%% decimal places. The %%unit%% may the number of decimal places\n *  or the name of a unit (e.g. ``\"gwei\"`` for 9 decimal places).\n */\nexport function parseUnits(value: string, unit?: string | Numeric): bigint {\n    assertArgument(typeof(value) === \"string\", \"value must be a string\", \"value\", value);\n\n    let decimals = 18;\n    if (typeof(unit) === \"string\") {\n        const index = names.indexOf(unit);\n        assertArgument(index >= 0, \"invalid unit\", \"unit\", unit);\n        decimals = 3 * index;\n    } else if (unit != null) {\n        decimals = getNumber(unit, \"unit\");\n    }\n\n    return FixedNumber.fromString(value, { decimals, width: 512 }).value;\n}\n\n/**\n *  Converts %%value%% into a //decimal string// using 18 decimal places.\n */\nexport function formatEther(wei: BigNumberish): string {\n    return formatUnits(wei, 18);\n}\n\n/**\n *  Converts the //decimal string// %%ether%% to a BigInt, using 18\n *  decimal places.\n */\nexport function parseEther(ether: string): bigint {\n    return parseUnits(ether, 18);\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAAA,WAAA,GAAAC,OAAA;AACA,MAAAC,gBAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AAKA,MAAMG,KAAK,GAAG,CACV,KAAK,EACL,MAAM,EACN,MAAM,EACN,MAAM,EACN,OAAO,EACP,QAAQ,EACR,OAAO,CACV;AAED;;;;;;AAMA,SAAgBC,WAAWA,CAACC,KAAmB,EAAEC,IAAuB;EACpE,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAI,OAAOD,IAAK,KAAK,QAAQ,EAAE;IAC3B,MAAME,KAAK,GAAGL,KAAK,CAACM,OAAO,CAACH,IAAI,CAAC;IACjC,IAAAP,WAAA,CAAAW,cAAc,EAACF,KAAK,IAAI,CAAC,EAAE,cAAc,EAAE,MAAM,EAAEF,IAAI,CAAC;IACxDC,QAAQ,GAAG,CAAC,GAAGC,KAAK;GACvB,MAAM,IAAIF,IAAI,IAAI,IAAI,EAAE;IACrBC,QAAQ,GAAG,IAAAL,UAAA,CAAAS,SAAS,EAACL,IAAI,EAAE,MAAM,CAAC;;EAGtC,OAAOL,gBAAA,CAAAW,WAAW,CAACC,SAAS,CAACR,KAAK,EAAEE,QAAQ,EAAE;IAAEA,QAAQ;IAAEO,KAAK,EAAE;EAAG,CAAE,CAAC,CAACC,QAAQ,EAAE;AACtF;AAXAC,OAAA,CAAAZ,WAAA,GAAAA,WAAA;AAaA;;;;;AAKA,SAAgBa,UAAUA,CAACZ,KAAa,EAAEC,IAAuB;EAC7D,IAAAP,WAAA,CAAAW,cAAc,EAAC,OAAOL,KAAM,KAAK,QAAQ,EAAE,wBAAwB,EAAE,OAAO,EAAEA,KAAK,CAAC;EAEpF,IAAIE,QAAQ,GAAG,EAAE;EACjB,IAAI,OAAOD,IAAK,KAAK,QAAQ,EAAE;IAC3B,MAAME,KAAK,GAAGL,KAAK,CAACM,OAAO,CAACH,IAAI,CAAC;IACjC,IAAAP,WAAA,CAAAW,cAAc,EAACF,KAAK,IAAI,CAAC,EAAE,cAAc,EAAE,MAAM,EAAEF,IAAI,CAAC;IACxDC,QAAQ,GAAG,CAAC,GAAGC,KAAK;GACvB,MAAM,IAAIF,IAAI,IAAI,IAAI,EAAE;IACrBC,QAAQ,GAAG,IAAAL,UAAA,CAAAS,SAAS,EAACL,IAAI,EAAE,MAAM,CAAC;;EAGtC,OAAOL,gBAAA,CAAAW,WAAW,CAACM,UAAU,CAACb,KAAK,EAAE;IAAEE,QAAQ;IAAEO,KAAK,EAAE;EAAG,CAAE,CAAC,CAACT,KAAK;AACxE;AAbAW,OAAA,CAAAC,UAAA,GAAAA,UAAA;AAeA;;;AAGA,SAAgBE,WAAWA,CAACC,GAAiB;EACzC,OAAOhB,WAAW,CAACgB,GAAG,EAAE,EAAE,CAAC;AAC/B;AAFAJ,OAAA,CAAAG,WAAA,GAAAA,WAAA;AAIA;;;;AAIA,SAAgBE,UAAUA,CAACC,KAAa;EACpC,OAAOL,UAAU,CAACK,KAAK,EAAE,EAAE,CAAC;AAChC;AAFAN,OAAA,CAAAK,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}