{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberCoder = void 0;\nconst index_js_1 = require(\"../../utils/index.js\");\nconst typed_js_1 = require(\"../typed.js\");\nconst abstract_coder_js_1 = require(\"./abstract-coder.js\");\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nclass NumberCoder extends abstract_coder_js_1.Coder {\n  size;\n  signed;\n  constructor(size, signed, localName) {\n    const name = (signed ? \"int\" : \"uint\") + size * 8;\n    super(name, name, localName, false);\n    (0, index_js_1.defineProperties)(this, {\n      size,\n      signed\n    }, {\n      size: \"number\",\n      signed: \"boolean\"\n    });\n  }\n  defaultValue() {\n    return 0;\n  }\n  encode(writer, _value) {\n    let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));\n    // Check bounds are safe for encoding\n    let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);\n    if (this.signed) {\n      let bounds = (0, index_js_1.mask)(maxUintValue, this.size * 8 - 1);\n      if (value > bounds || value < -(bounds + BN_1)) {\n        this._throwError(\"value out-of-bounds\", _value);\n      }\n      value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);\n    } else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {\n      this._throwError(\"value out-of-bounds\", _value);\n    }\n    return writer.writeValue(value);\n  }\n  decode(reader) {\n    let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);\n    if (this.signed) {\n      value = (0, index_js_1.fromTwos)(value, this.size * 8);\n    }\n    return value;\n  }\n}\nexports.NumberCoder = NumberCoder;","map":{"version":3,"names":["index_js_1","require","typed_js_1","abstract_coder_js_1","BN_0","BigInt","BN_1","BN_MAX_UINT256","NumberCoder","Coder","size","signed","constructor","localName","name","defineProperties","defaultValue","encode","writer","_value","value","getBigInt","Typed","dereference","type","maxUintValue","mask","WordSize","bounds","_throwError","toTwos","writeValue","decode","reader","readValue","fromTwos","exports"],"sources":["/home/nikola/Desktop/Projekat/friendship-dapp/node_modules/ethers/src.ts/abi/coders/number.ts"],"sourcesContent":["import {\n    defineProperties, fromTwos, getBigInt, mask, toTwos\n} from \"../../utils/index.js\";\n\nimport { Typed } from \"../typed.js\";\nimport { Coder, WordSize } from \"./abstract-coder.js\";\n\nimport type { BigNumberish } from \"../../utils/index.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n/**\n *  @_ignore\n */\nexport class NumberCoder extends Coder {\n    readonly size!: number;\n    readonly signed!: boolean;\n\n    constructor(size: number, signed: boolean, localName: string) {\n        const name = ((signed ? \"int\": \"uint\") + (size * 8));\n        super(name, name, localName, false);\n\n        defineProperties<NumberCoder>(this, { size, signed }, { size: \"number\", signed: \"boolean\" });\n    }\n\n    defaultValue(): number {\n        return 0;\n    }\n\n    encode(writer: Writer, _value: BigNumberish | Typed): number {\n        let value = getBigInt(Typed.dereference(_value, this.type));\n\n        // Check bounds are safe for encoding\n        let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n        if (this.signed) {\n            let bounds = mask(maxUintValue, (this.size * 8) - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = toTwos(value, 8 * WordSize);\n        } else if (value < BN_0 || value > mask(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        let value = mask(reader.readValue(), this.size * 8);\n\n        if (this.signed) {\n            value = fromTwos(value, this.size * 8);\n        }\n\n        return value;\n    }\n}\n\n"],"mappings":";;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AAIA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,mBAAA,GAAAF,OAAA;AAOA,MAAMG,IAAI,GAAGC,MAAM,CAAC,CAAC,CAAC;AACtB,MAAMC,IAAI,GAAGD,MAAM,CAAC,CAAC,CAAC;AACtB,MAAME,cAAc,GAAGF,MAAM,CAAC,oEAAoE,CAAC;AAEnG;;;AAGA,MAAaG,WAAY,SAAQL,mBAAA,CAAAM,KAAK;EACzBC,IAAI;EACJC,MAAM;EAEfC,YAAYF,IAAY,EAAEC,MAAe,EAAEE,SAAiB;IACxD,MAAMC,IAAI,GAAI,CAACH,MAAM,GAAG,KAAK,GAAE,MAAM,IAAKD,IAAI,GAAG,CAAG;IACpD,KAAK,CAACI,IAAI,EAAEA,IAAI,EAAED,SAAS,EAAE,KAAK,CAAC;IAEnC,IAAAb,UAAA,CAAAe,gBAAgB,EAAc,IAAI,EAAE;MAAEL,IAAI;MAAEC;IAAM,CAAE,EAAE;MAAED,IAAI,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAS,CAAE,CAAC;EAChG;EAEAK,YAAYA,CAAA;IACR,OAAO,CAAC;EACZ;EAEAC,MAAMA,CAACC,MAAc,EAAEC,MAA4B;IAC/C,IAAIC,KAAK,GAAG,IAAApB,UAAA,CAAAqB,SAAS,EAACnB,UAAA,CAAAoB,KAAK,CAACC,WAAW,CAACJ,MAAM,EAAE,IAAI,CAACK,IAAI,CAAC,CAAC;IAE3D;IACA,IAAIC,YAAY,GAAG,IAAAzB,UAAA,CAAA0B,IAAI,EAACnB,cAAc,EAAEJ,mBAAA,CAAAwB,QAAQ,GAAG,CAAC,CAAC;IACrD,IAAI,IAAI,CAAChB,MAAM,EAAE;MACb,IAAIiB,MAAM,GAAG,IAAA5B,UAAA,CAAA0B,IAAI,EAACD,YAAY,EAAG,IAAI,CAACf,IAAI,GAAG,CAAC,GAAI,CAAC,CAAC;MACpD,IAAIU,KAAK,GAAGQ,MAAM,IAAIR,KAAK,GAAG,EAAEQ,MAAM,GAAGtB,IAAI,CAAC,EAAE;QAC5C,IAAI,CAACuB,WAAW,CAAC,qBAAqB,EAAEV,MAAM,CAAC;;MAEnDC,KAAK,GAAG,IAAApB,UAAA,CAAA8B,MAAM,EAACV,KAAK,EAAE,CAAC,GAAGjB,mBAAA,CAAAwB,QAAQ,CAAC;KACtC,MAAM,IAAIP,KAAK,GAAGhB,IAAI,IAAIgB,KAAK,GAAG,IAAApB,UAAA,CAAA0B,IAAI,EAACD,YAAY,EAAE,IAAI,CAACf,IAAI,GAAG,CAAC,CAAC,EAAE;MAClE,IAAI,CAACmB,WAAW,CAAC,qBAAqB,EAAEV,MAAM,CAAC;;IAGnD,OAAOD,MAAM,CAACa,UAAU,CAACX,KAAK,CAAC;EACnC;EAEAY,MAAMA,CAACC,MAAc;IACjB,IAAIb,KAAK,GAAG,IAAApB,UAAA,CAAA0B,IAAI,EAACO,MAAM,CAACC,SAAS,EAAE,EAAE,IAAI,CAACxB,IAAI,GAAG,CAAC,CAAC;IAEnD,IAAI,IAAI,CAACC,MAAM,EAAE;MACbS,KAAK,GAAG,IAAApB,UAAA,CAAAmC,QAAQ,EAACf,KAAK,EAAE,IAAI,CAACV,IAAI,GAAG,CAAC,CAAC;;IAG1C,OAAOU,KAAK;EAChB;;AAzCJgB,OAAA,CAAA5B,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}