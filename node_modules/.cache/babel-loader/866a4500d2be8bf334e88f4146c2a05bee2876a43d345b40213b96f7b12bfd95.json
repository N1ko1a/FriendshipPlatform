{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultProvider = void 0;\nconst index_js_1 = require(\"../utils/index.js\");\nconst provider_ankr_js_1 = require(\"./provider-ankr.js\");\nconst provider_alchemy_js_1 = require(\"./provider-alchemy.js\");\nconst provider_cloudflare_js_1 = require(\"./provider-cloudflare.js\");\nconst provider_etherscan_js_1 = require(\"./provider-etherscan.js\");\nconst provider_infura_js_1 = require(\"./provider-infura.js\");\n//import { PocketProvider } from \"./provider-pocket.js\";\nconst provider_quicknode_js_1 = require(\"./provider-quicknode.js\");\nconst provider_fallback_js_1 = require(\"./provider-fallback.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_websocket_js_1 = require(\"./provider-websocket.js\");\nfunction isWebSocketLike(value) {\n  return value && typeof value.send === \"function\" && typeof value.close === \"function\";\n}\nconst Testnets = \"goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt\".split(\" \");\nfunction getDefaultProvider(network, options) {\n  if (options == null) {\n    options = {};\n  }\n  const allowService = name => {\n    if (options[name] === \"-\") {\n      return false;\n    }\n    if (typeof options.exclusive === \"string\") {\n      return name === options.exclusive;\n    }\n    if (Array.isArray(options.exclusive)) {\n      return options.exclusive.indexOf(name) !== -1;\n    }\n    return true;\n  };\n  if (typeof network === \"string\" && network.match(/^https?:/)) {\n    return new provider_jsonrpc_js_1.JsonRpcProvider(network);\n  }\n  if (typeof network === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n    return new provider_websocket_js_1.WebSocketProvider(network);\n  }\n  // Get the network and name, if possible\n  let staticNetwork = null;\n  try {\n    staticNetwork = network_js_1.Network.from(network);\n  } catch (error) {}\n  const providers = [];\n  if (allowService(\"publicPolygon\") && staticNetwork) {\n    if (staticNetwork.name === \"matic\") {\n      providers.push(new provider_jsonrpc_js_1.JsonRpcProvider(\"https:/\\/polygon-rpc.com/\", staticNetwork, {\n        staticNetwork\n      }));\n    }\n  }\n  if (allowService(\"alchemy\")) {\n    try {\n      providers.push(new provider_alchemy_js_1.AlchemyProvider(network, options.alchemy));\n    } catch (error) {}\n  }\n  if (allowService(\"ankr\") && options.ankr != null) {\n    try {\n      providers.push(new provider_ankr_js_1.AnkrProvider(network, options.ankr));\n    } catch (error) {}\n  }\n  if (allowService(\"cloudflare\")) {\n    try {\n      providers.push(new provider_cloudflare_js_1.CloudflareProvider(network));\n    } catch (error) {}\n  }\n  if (allowService(\"etherscan\")) {\n    try {\n      providers.push(new provider_etherscan_js_1.EtherscanProvider(network, options.etherscan));\n    } catch (error) {}\n  }\n  if (allowService(\"infura\")) {\n    try {\n      let projectId = options.infura;\n      let projectSecret = undefined;\n      if (typeof projectId === \"object\") {\n        projectSecret = projectId.projectSecret;\n        projectId = projectId.projectId;\n      }\n      providers.push(new provider_infura_js_1.InfuraProvider(network, projectId, projectSecret));\n    } catch (error) {}\n  }\n  /*\n      if (options.pocket !== \"-\") {\n          try {\n              let appId = options.pocket;\n              let secretKey: undefined | string = undefined;\n              let loadBalancer: undefined | boolean = undefined;\n              if (typeof(appId) === \"object\") {\n                  loadBalancer = !!appId.loadBalancer;\n                  secretKey = appId.secretKey;\n                  appId = appId.appId;\n              }\n              providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n          } catch (error) { console.log(error); }\n      }\n  */\n  if (allowService(\"quicknode\")) {\n    try {\n      let token = options.quicknode;\n      providers.push(new provider_quicknode_js_1.QuickNodeProvider(network, token));\n    } catch (error) {}\n  }\n  (0, index_js_1.assert)(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"getDefaultProvider\"\n  });\n  // No need for a FallbackProvider\n  if (providers.length === 1) {\n    return providers[0];\n  }\n  // We use the floor because public third-party providers can be unreliable,\n  // so a low number of providers with a large quorum will fail too often\n  let quorum = Math.floor(providers.length / 2);\n  if (quorum > 2) {\n    quorum = 2;\n  }\n  // Testnets don't need as strong a security gaurantee and speed is\n  // more useful during testing\n  if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {\n    quorum = 1;\n  }\n  // Provided override qorum takes priority\n  if (options && options.quorum) {\n    quorum = options.quorum;\n  }\n  return new provider_fallback_js_1.FallbackProvider(providers, undefined, {\n    quorum\n  });\n}\nexports.getDefaultProvider = getDefaultProvider;","map":{"version":3,"names":["index_js_1","require","provider_ankr_js_1","provider_alchemy_js_1","provider_cloudflare_js_1","provider_etherscan_js_1","provider_infura_js_1","provider_quicknode_js_1","provider_fallback_js_1","provider_jsonrpc_js_1","network_js_1","provider_websocket_js_1","isWebSocketLike","value","send","close","Testnets","split","getDefaultProvider","network","options","allowService","name","exclusive","Array","isArray","indexOf","match","JsonRpcProvider","WebSocketProvider","staticNetwork","Network","from","error","providers","push","AlchemyProvider","alchemy","ankr","AnkrProvider","CloudflareProvider","EtherscanProvider","etherscan","projectId","infura","projectSecret","undefined","InfuraProvider","token","quicknode","QuickNodeProvider","assert","length","operation","quorum","Math","floor","FallbackProvider","exports"],"sources":["/home/nikola/Desktop/Kriptografija projekat Nikola Ivanovic 637-2019/friendship-dapp/node_modules/ethers/src.ts/providers/default-provider.ts"],"sourcesContent":["\nimport { assert } from \"../utils/index.js\";\n\nimport { AnkrProvider } from \"./provider-ankr.js\";\nimport { AlchemyProvider } from \"./provider-alchemy.js\";\nimport { CloudflareProvider } from \"./provider-cloudflare.js\";\nimport { EtherscanProvider } from \"./provider-etherscan.js\";\nimport { InfuraProvider } from \"./provider-infura.js\";\n//import { PocketProvider } from \"./provider-pocket.js\";\nimport { QuickNodeProvider } from \"./provider-quicknode.js\";\n\nimport { FallbackProvider } from \"./provider-fallback.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { Network } from \"./network.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\n\nimport type { AbstractProvider } from \"./abstract-provider.js\";\nimport type { Networkish } from \"./network.js\";\nimport { WebSocketLike } from \"./provider-websocket.js\";\n\nfunction isWebSocketLike(value: any): value is WebSocketLike {\n    return (value && typeof(value.send) === \"function\" &&\n        typeof(value.close) === \"function\");\n}\n\nconst Testnets = \"goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt\".split(\" \");\n\nexport function getDefaultProvider(network: string | Networkish | WebSocketLike, options?: any): AbstractProvider {\n    if (options == null) { options = { }; }\n\n    const allowService = (name: string) => {\n        if (options[name] === \"-\") { return false; }\n        if (typeof(options.exclusive) === \"string\") {\n            return (name === options.exclusive);\n        }\n        if (Array.isArray(options.exclusive)) {\n            return (options.exclusive.indexOf(name) !== -1);\n        }\n        return true;\n    };\n\n    if (typeof(network) === \"string\" && network.match(/^https?:/)) {\n        return new JsonRpcProvider(network);\n    }\n\n    if (typeof(network) === \"string\" && network.match(/^wss?:/) || isWebSocketLike(network)) {\n        return new WebSocketProvider(network);\n    }\n\n    // Get the network and name, if possible\n    let staticNetwork: null | Network = null;\n    try {\n        staticNetwork = Network.from(network);\n    } catch (error) { }\n\n\n    const providers: Array<AbstractProvider> = [ ];\n\n    if (allowService(\"publicPolygon\") && staticNetwork) {\n        if (staticNetwork.name === \"matic\") {\n            providers.push(new JsonRpcProvider(\"https:/\\/polygon-rpc.com/\", staticNetwork, { staticNetwork }));\n        }\n    }\n\n    if (allowService(\"alchemy\")) {\n        try {\n            providers.push(new AlchemyProvider(network, options.alchemy));\n        } catch (error) { }\n    }\n\n    if (allowService(\"ankr\") && options.ankr != null) {\n        try {\n            providers.push(new AnkrProvider(network, options.ankr));\n        } catch (error) { }\n    }\n\n    if (allowService(\"cloudflare\")) {\n        try {\n            providers.push(new CloudflareProvider(network));\n        } catch (error) { }\n    }\n\n    if (allowService(\"etherscan\")) {\n        try {\n            providers.push(new EtherscanProvider(network, options.etherscan));\n        } catch (error) { }\n    }\n\n    if (allowService(\"infura\")) {\n        try {\n            let projectId = options.infura;\n            let projectSecret: undefined | string = undefined;\n            if (typeof(projectId) === \"object\") {\n                projectSecret = projectId.projectSecret;\n                projectId = projectId.projectId;\n            }\n            providers.push(new InfuraProvider(network, projectId, projectSecret));\n        } catch (error) { }\n    }\n/*\n    if (options.pocket !== \"-\") {\n        try {\n            let appId = options.pocket;\n            let secretKey: undefined | string = undefined;\n            let loadBalancer: undefined | boolean = undefined;\n            if (typeof(appId) === \"object\") {\n                loadBalancer = !!appId.loadBalancer;\n                secretKey = appId.secretKey;\n                appId = appId.appId;\n            }\n            providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));\n        } catch (error) { console.log(error); }\n    }\n*/\n    if (allowService(\"quicknode\")) {\n        try {\n            let token = options.quicknode;\n            providers.push(new QuickNodeProvider(network, token));\n        } catch (error) { }\n    }\n\n    assert(providers.length, \"unsupported default network\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getDefaultProvider\"\n    });\n\n    // No need for a FallbackProvider\n    if (providers.length === 1) { return providers[0]; }\n\n    // We use the floor because public third-party providers can be unreliable,\n    // so a low number of providers with a large quorum will fail too often\n    let quorum = Math.floor(providers.length / 2);\n    if (quorum > 2) { quorum = 2; }\n\n    // Testnets don't need as strong a security gaurantee and speed is\n    // more useful during testing\n    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) { quorum = 1; }\n\n    // Provided override qorum takes priority\n    if (options && options.quorum) { quorum = options.quorum; }\n\n    return new FallbackProvider(providers, undefined, { quorum });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}