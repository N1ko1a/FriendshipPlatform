{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VoidSigner = exports.AbstractSigner = void 0;\n/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../transaction/index.js\");\nconst index_js_3 = require(\"../utils/index.js\");\nconst provider_js_1 = require(\"./provider.js\");\nfunction checkProvider(signer, operation) {\n  if (signer.provider) {\n    return signer.provider;\n  }\n  (0, index_js_3.assert)(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", {\n    operation\n  });\n}\nasync function populate(signer, tx) {\n  let pop = (0, provider_js_1.copyRequest)(tx);\n  if (pop.to != null) {\n    pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);\n  }\n  if (pop.from != null) {\n    const from = pop.from;\n    pop.from = Promise.all([signer.getAddress(), (0, index_js_1.resolveAddress)(from, signer)]).then(([address, from]) => {\n      (0, index_js_3.assertArgument)(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\n      return address;\n    });\n  } else {\n    pop.from = signer.getAddress();\n  }\n  return await (0, index_js_3.resolveProperties)(pop);\n}\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nclass AbstractSigner {\n  /**\n   *  The provider this signer is connected to.\n   */\n  provider;\n  /**\n   *  Creates a new Signer connected to %%provider%%.\n   */\n  constructor(provider) {\n    (0, index_js_3.defineProperties)(this, {\n      provider: provider || null\n    });\n  }\n  async getNonce(blockTag) {\n    return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n  }\n  async populateCall(tx) {\n    const pop = await populate(this, tx);\n    return pop;\n  }\n  async populateTransaction(tx) {\n    const provider = checkProvider(this, \"populateTransaction\");\n    const pop = await populate(this, tx);\n    if (pop.nonce == null) {\n      pop.nonce = await this.getNonce(\"pending\");\n    }\n    if (pop.gasLimit == null) {\n      pop.gasLimit = await this.estimateGas(pop);\n    }\n    // Populate the chain ID\n    const network = await this.provider.getNetwork();\n    if (pop.chainId != null) {\n      const chainId = (0, index_js_3.getBigInt)(pop.chainId);\n      (0, index_js_3.assertArgument)(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n    } else {\n      pop.chainId = network.chainId;\n    }\n    // Do not allow mixing pre-eip-1559 and eip-1559 properties\n    const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;\n    if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n      (0, index_js_3.assertArgument)(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n    } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n      (0, index_js_3.assertArgument)(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n    }\n    if ((pop.type === 2 || pop.type == null) && pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null) {\n      // Fully-formed EIP-1559 transaction (skip getFeeData)\n      pop.type = 2;\n    } else if (pop.type === 0 || pop.type === 1) {\n      // Explicit Legacy or EIP-2930 transaction\n      // We need to get fee data to determine things\n      const feeData = await provider.getFeeData();\n      (0, index_js_3.assert)(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"getGasPrice\"\n      });\n      // Populate missing gasPrice\n      if (pop.gasPrice == null) {\n        pop.gasPrice = feeData.gasPrice;\n      }\n    } else {\n      // We need to get fee data to determine things\n      const feeData = await provider.getFeeData();\n      if (pop.type == null) {\n        // We need to auto-detect the intended type of this transaction...\n        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n          // The network supports EIP-1559!\n          // Upgrade transaction from null to eip-1559\n          pop.type = 2;\n          if (pop.gasPrice != null) {\n            // Using legacy gasPrice property on an eip-1559 network,\n            // so use gasPrice as both fee properties\n            const gasPrice = pop.gasPrice;\n            delete pop.gasPrice;\n            pop.maxFeePerGas = gasPrice;\n            pop.maxPriorityFeePerGas = gasPrice;\n          } else {\n            // Populate missing fee data\n            if (pop.maxFeePerGas == null) {\n              pop.maxFeePerGas = feeData.maxFeePerGas;\n            }\n            if (pop.maxPriorityFeePerGas == null) {\n              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n            }\n          }\n        } else if (feeData.gasPrice != null) {\n          // Network doesn't support EIP-1559...\n          // ...but they are trying to use EIP-1559 properties\n          (0, index_js_3.assert)(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"populateTransaction\"\n          });\n          // Populate missing fee data\n          if (pop.gasPrice == null) {\n            pop.gasPrice = feeData.gasPrice;\n          }\n          // Explicitly set untyped transaction to legacy\n          // @TODO: Maybe this shold allow type 1?\n          pop.type = 0;\n        } else {\n          // getFeeData has failed us.\n          (0, index_js_3.assert)(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"signer.getFeeData\"\n          });\n        }\n      } else if (pop.type === 2) {\n        // Explicitly using EIP-1559\n        // Populate missing fee data\n        if (pop.maxFeePerGas == null) {\n          pop.maxFeePerGas = feeData.maxFeePerGas;\n        }\n        if (pop.maxPriorityFeePerGas == null) {\n          pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n        }\n      }\n    }\n    //@TOOD: Don't await all over the place; save them up for\n    // the end for better batching\n    return await (0, index_js_3.resolveProperties)(pop);\n  }\n  async estimateGas(tx) {\n    return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n  }\n  async call(tx) {\n    return checkProvider(this, \"call\").call(await this.populateCall(tx));\n  }\n  async resolveName(name) {\n    const provider = checkProvider(this, \"resolveName\");\n    return await provider.resolveName(name);\n  }\n  async sendTransaction(tx) {\n    const provider = checkProvider(this, \"sendTransaction\");\n    const pop = await this.populateTransaction(tx);\n    delete pop.from;\n    const txObj = index_js_2.Transaction.from(pop);\n    return await provider.broadcastTransaction(await this.signTransaction(txObj));\n  }\n}\nexports.AbstractSigner = AbstractSigner;\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nclass VoidSigner extends AbstractSigner {\n  /**\n   *  The signer address.\n   */\n  address;\n  /**\n   *  Creates a new **VoidSigner** with %%address%% attached to\n   *  %%provider%%.\n   */\n  constructor(address, provider) {\n    super(provider);\n    (0, index_js_3.defineProperties)(this, {\n      address\n    });\n  }\n  async getAddress() {\n    return this.address;\n  }\n  connect(provider) {\n    return new VoidSigner(this.address, provider);\n  }\n  #throwUnsupported(suffix, operation) {\n    (0, index_js_3.assert)(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", {\n      operation\n    });\n  }\n  async signTransaction(tx) {\n    this.#throwUnsupported(\"transactions\", \"signTransaction\");\n  }\n  async signMessage(message) {\n    this.#throwUnsupported(\"messages\", \"signMessage\");\n  }\n  async signTypedData(domain, types, value) {\n    this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n  }\n}\nexports.VoidSigner = VoidSigner;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","provider_js_1","checkProvider","signer","operation","provider","assert","populate","tx","pop","copyRequest","to","resolveAddress","from","Promise","all","getAddress","then","address","assertArgument","toLowerCase","resolveProperties","AbstractSigner","constructor","defineProperties","getNonce","blockTag","getTransactionCount","populateCall","populateTransaction","nonce","gasLimit","estimateGas","network","getNetwork","chainId","getBigInt","hasEip1559","maxFeePerGas","maxPriorityFeePerGas","gasPrice","type","feeData","getFeeData","call","resolveName","name","sendTransaction","txObj","Transaction","broadcastTransaction","signTransaction","exports","VoidSigner","connect","throwUnsupported","#throwUnsupported","suffix","signMessage","message","signTypedData","domain","types","value"],"sources":["/home/nikola/Desktop/Kriptografija projekat Nikola Ivanovic 637-2019/friendship-dapp/node_modules/ethers/src.ts/providers/abstract-signer.ts"],"sourcesContent":["/**\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\n *  are sufficent for most developers, but this is provided to\n *  fascilitate more complex Signers.\n *\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\n */\nimport { resolveAddress } from \"../address/index.js\";\nimport { Transaction } from \"../transaction/index.js\";\nimport {\n    defineProperties, getBigInt, resolveProperties,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { copyRequest } from \"./provider.js\";\n\nimport type { TypedDataDomain, TypedDataField } from \"../hash/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type {\n    BlockTag, Provider, TransactionRequest, TransactionResponse\n} from \"./provider.js\";\nimport type { Signer } from \"./signer.js\";\n\n\nfunction checkProvider(signer: AbstractSigner, operation: string): Provider {\n    if (signer.provider) { return signer.provider; }\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\n}\n\nasync function populate(signer: AbstractSigner, tx: TransactionRequest): Promise<TransactionLike<string>> {\n    let pop: any = copyRequest(tx);\n\n    if (pop.to != null) { pop.to = resolveAddress(pop.to, signer); }\n\n    if (pop.from != null) {\n        const from = pop.from;\n        pop.from = Promise.all([\n            signer.getAddress(),\n            resolveAddress(from, signer)\n        ]).then(([ address, from ]) => {\n            assertArgument(address.toLowerCase() === from.toLowerCase(),\n                \"transaction from mismatch\", \"tx.from\", from);\n            return address;\n        });\n    } else {\n        pop.from = signer.getAddress();\n    }\n\n    return await resolveProperties(pop);\n}\n\n\n/**\n *  An **AbstractSigner** includes most of teh functionality required\n *  to get a [[Signer]] working as expected, but requires a few\n *  Signer-specific methods be overridden.\n *\n */\nexport abstract class AbstractSigner<P extends null | Provider = null | Provider> implements Signer {\n    /**\n     *  The provider this signer is connected to.\n     */\n    readonly provider!: P;\n\n    /**\n     *  Creates a new Signer connected to %%provider%%.\n     */\n    constructor(provider?: P) {\n        defineProperties<AbstractSigner>(this, { provider: (provider || null) });\n    }\n\n    /**\n     *  Resolves to the Signer address.\n     */\n    abstract getAddress(): Promise<string>;\n\n    /**\n     *  Returns the signer connected to %%provider%%.\n     *\n     *  This may throw, for example, a Signer connected over a Socket or\n     *  to a specific instance of a node may not be transferrable.\n     */\n    abstract connect(provider: null | Provider): Signer;\n\n    async getNonce(blockTag?: BlockTag): Promise<number> {\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\n    }\n\n    async populateCall(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const pop = await populate(this, tx);\n        return pop;\n    }\n\n    async populateTransaction(tx: TransactionRequest): Promise<TransactionLike<string>> {\n        const provider = checkProvider(this, \"populateTransaction\");\n\n        const pop = await populate(this, tx);\n\n        if (pop.nonce == null) {\n            pop.nonce = await this.getNonce(\"pending\");\n        }\n\n        if (pop.gasLimit == null) {\n            pop.gasLimit = await this.estimateGas(pop);\n        }\n\n        // Populate the chain ID\n        const network = await (<Provider>(this.provider)).getNetwork();\n        if (pop.chainId != null) {\n            const chainId = getBigInt(pop.chainId);\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\n        } else {\n            pop.chainId = network.chainId;\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\n        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\n        }\n\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            pop.type = 2;\n\n        } else if (pop.type === 0 || pop.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"getGasPrice\" });\n\n            // Populate missing gasPrice\n            if (pop.gasPrice == null) { pop.gasPrice = feeData.gasPrice; }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await provider.getFeeData();\n\n            if (pop.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    pop.type = 2;\n\n                    if (pop.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = pop.gasPrice;\n                        delete pop.gasPrice;\n                        pop.maxFeePerGas = gasPrice;\n                        pop.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n\n                        if (pop.maxFeePerGas == null) {\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\n                        }\n\n                        if (pop.maxPriorityFeePerGas == null) {\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                        }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\n                            operation: \"populateTransaction\" });\n\n                    // Populate missing fee data\n                    if (pop.gasPrice == null) {\n                        pop.gasPrice = feeData.gasPrice;\n                    }\n\n                    // Explicitly set untyped transaction to legacy\n                    // @TODO: Maybe this shold allow type 1?\n                    pop.type = 0;\n\n               } else {\n                    // getFeeData has failed us.\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"signer.getFeeData\" });\n                }\n\n            } else if (pop.type === 2) {\n                // Explicitly using EIP-1559\n\n                // Populate missing fee data\n                if (pop.maxFeePerGas == null) {\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\n                }\n\n                if (pop.maxPriorityFeePerGas == null) {\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n            }\n        }\n\n//@TOOD: Don't await all over the place; save them up for\n// the end for better batching\n        return await resolveProperties(pop);\n    }\n\n    async estimateGas(tx: TransactionRequest): Promise<bigint> {\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\n    }\n\n    async call(tx: TransactionRequest): Promise<string> {\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\n    }\n\n    async resolveName(name: string): Promise<null | string> {\n        const provider = checkProvider(this, \"resolveName\");\n        return await provider.resolveName(name);\n    }\n\n    async sendTransaction(tx: TransactionRequest): Promise<TransactionResponse> {\n        const provider = checkProvider(this, \"sendTransaction\");\n\n        const pop = await this.populateTransaction(tx);\n        delete pop.from;\n        const txObj = Transaction.from(pop);\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\n    }\n\n    abstract signTransaction(tx: TransactionRequest): Promise<string>;\n    abstract signMessage(message: string | Uint8Array): Promise<string>;\n    abstract signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\n/**\n *  A **VoidSigner** is a class deisgned to allow an address to be used\n *  in any API which accepts a Signer, but for which there are no\n *  credentials available to perform any actual signing.\n *\n *  This for example allow impersonating an account for the purpose of\n *  static calls or estimating gas, but does not allow sending transactions.\n */\nexport class VoidSigner extends AbstractSigner {\n    /**\n     *  The signer address.\n     */\n    readonly address!: string;\n\n    /**\n     *  Creates a new **VoidSigner** with %%address%% attached to\n     *  %%provider%%.\n     */\n    constructor(address: string, provider?: null | Provider) {\n        super(provider);\n        defineProperties<VoidSigner>(this, { address });\n    }\n\n    async getAddress(): Promise<string> { return this.address; }\n\n    connect(provider: null | Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n\n    #throwUnsupported(suffix: string, operation: string): never {\n        assert(false, `VoidSigner cannot sign ${ suffix }`, \"UNSUPPORTED_OPERATION\", { operation });\n    }\n\n    async signTransaction(tx: TransactionRequest): Promise<string> {\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\n    }\n\n    async signMessage(message: string | Uint8Array): Promise<string> {\n        this.#throwUnsupported(\"messages\", \"signMessage\");\n    }\n\n    async signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}